// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_config_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Exe;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IdMap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MountPt;
}  // namespace protobuf_config_2eproto
namespace nsjail {
class IdMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IdMap>
      _instance;
} _IdMap_default_instance_;
class MountPtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MountPt>
      _instance;
} _MountPt_default_instance_;
class ExeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Exe>
      _instance;
} _Exe_default_instance_;
class NsJailConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NsJailConfig>
      _instance;
} _NsJailConfig_default_instance_;
}  // namespace nsjail
namespace protobuf_config_2eproto {
static void InitDefaultsIdMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nsjail::_IdMap_default_instance_;
    new (ptr) ::nsjail::IdMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nsjail::IdMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IdMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIdMap}, {}};

static void InitDefaultsMountPt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nsjail::_MountPt_default_instance_;
    new (ptr) ::nsjail::MountPt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nsjail::MountPt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MountPt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMountPt}, {}};

static void InitDefaultsExe() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nsjail::_Exe_default_instance_;
    new (ptr) ::nsjail::Exe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nsjail::Exe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Exe =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExe}, {}};

static void InitDefaultsNsJailConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get_mutable() = ::std::string("NSJAIL", 6);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get_mutable() = ::std::string("/", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get_mutable() = ::std::string("::", 2);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get_mutable() = ::std::string("/sys/fs/cgroup/memory", 21);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get_mutable() = ::std::string("NSJAIL", 6);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get_mutable() = ::std::string("/sys/fs/cgroup/pids", 19);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get_mutable() = ::std::string("NSJAIL", 6);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get_mutable() = ::std::string("/sys/fs/cgroup/net_cls", 22);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get_mutable() = ::std::string("NSJAIL", 6);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get_mutable() = ::std::string("/sys/fs/cgroup/cpu", 18);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get_mutable() = ::std::string("NSJAIL", 6);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get_mutable() = ::std::string("/sys/fs/cgroup", 14);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get_mutable() = ::std::string("192.168.0.2", 11);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get_mutable() = ::std::string("255.255.255.0", 13);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get_mutable() = ::std::string("192.168.0.1", 11);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get_mutable());
  ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.DefaultConstruct();
  *::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get_mutable() = ::std::string("private", 7);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get_mutable());
  {
    void* ptr = &::nsjail::_NsJailConfig_default_instance_;
    new (ptr) ::nsjail::NsJailConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nsjail::NsJailConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_NsJailConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNsJailConfig}, {
      &protobuf_config_2eproto::scc_info_IdMap.base,
      &protobuf_config_2eproto::scc_info_MountPt.base,
      &protobuf_config_2eproto::scc_info_Exe.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_IdMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MountPt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Exe.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NsJailConfig.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::IdMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::IdMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::IdMap, inside_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::IdMap, outside_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::IdMap, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::IdMap, use_newidmap_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, prefix_src_env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, src_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, prefix_dst_env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, fstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, is_bind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, rw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, is_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, mandatory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, is_symlink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, nosuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, nodev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::MountPt, noexec_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  14,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::Exe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::Exe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::Exe, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::Exe, arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::Exe, arg0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::Exe, exec_fd_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, no_pivotroot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, bindhost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, max_conns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, max_conns_per_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, time_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, daemon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, max_cpus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, log_fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, log_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, log_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, keep_env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, envar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, keep_caps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, silent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, skip_setsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, stderr_to_null_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, pass_fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, disable_no_new_privs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_as_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_core_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_core_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_cpu_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_fsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_fsize_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_nofile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_nofile_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_nproc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_nproc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_stack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_stack_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_memlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_memlock_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_rtprio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_rtprio_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_msgqueue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, rlimit_msgqueue_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, disable_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, persona_addr_compat_layout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, persona_mmap_page_zero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, persona_read_implies_exec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, persona_addr_limit_3gb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, persona_addr_no_randomize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, clone_newnet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, clone_newuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, clone_newns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, clone_newpid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, clone_newipc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, clone_newuts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, clone_newcgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, clone_newtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, uidmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, gidmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, mount_proc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, mount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, seccomp_policy_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, seccomp_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, seccomp_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_mem_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_mem_memsw_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_mem_swap_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_mem_mount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_mem_parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_pids_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_pids_mount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_pids_parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_net_cls_classid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_net_cls_mount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_net_cls_parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_cpu_ms_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_cpu_mount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroup_cpu_parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, cgroupv2_mount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, use_cgroupv2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, iface_no_lo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, iface_own_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, macvlan_iface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, macvlan_vs_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, macvlan_vs_nm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, macvlan_vs_gw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, macvlan_vs_ma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, macvlan_vs_mo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, nice_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, exec_bin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, disable_tsc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, forward_signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nsjail::NsJailConfig, detect_cgroupv2_),
  0,
  ~0u,
  62,
  1,
  2,
  26,
  22,
  3,
  23,
  24,
  63,
  27,
  25,
  30,
  4,
  31,
  28,
  ~0u,
  29,
  ~0u,
  32,
  33,
  34,
  ~0u,
  35,
  64,
  37,
  36,
  38,
  65,
  39,
  66,
  40,
  67,
  42,
  68,
  70,
  69,
  71,
  72,
  73,
  41,
  74,
  75,
  76,
  43,
  44,
  45,
  46,
  47,
  48,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  49,
  ~0u,
  ~0u,
  50,
  ~0u,
  5,
  ~0u,
  55,
  52,
  59,
  85,
  6,
  7,
  53,
  8,
  9,
  51,
  10,
  11,
  54,
  12,
  13,
  14,
  56,
  57,
  ~0u,
  15,
  16,
  17,
  18,
  19,
  20,
  84,
  21,
  58,
  60,
  61,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::nsjail::IdMap)},
  { 13, 33, sizeof(::nsjail::MountPt)},
  { 48, 57, sizeof(::nsjail::Exe)},
  { 61, 161, sizeof(::nsjail::NsJailConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nsjail::_IdMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nsjail::_MountPt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nsjail::_Exe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nsjail::_NsJailConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014config.proto\022\006nsjail\"a\n\005IdMap\022\023\n\tinsid"
      "e_id\030\001 \001(\t:\000\022\024\n\noutside_id\030\002 \001(\t:\000\022\020\n\005co"
      "unt\030\003 \001(\r:\0011\022\033\n\014use_newidmap\030\004 \001(\010:\005fals"
      "e\"\312\002\n\007MountPt\022\r\n\003src\030\001 \001(\t:\000\022\030\n\016prefix_s"
      "rc_env\030\002 \001(\t:\000\022\025\n\013src_content\030\003 \001(\014:\000\022\r\n"
      "\003dst\030\004 \002(\t:\000\022\030\n\016prefix_dst_env\030\005 \001(\t:\000\022\020"
      "\n\006fstype\030\006 \001(\t:\000\022\021\n\007options\030\007 \001(\t:\000\022\026\n\007i"
      "s_bind\030\010 \001(\010:\005false\022\021\n\002rw\030\t \001(\010:\005false\022\016"
      "\n\006is_dir\030\n \001(\010\022\027\n\tmandatory\030\013 \001(\010:\004true\022"
      "\031\n\nis_symlink\030\014 \001(\010:\005false\022\025\n\006nosuid\030\r \001"
      "(\010:\005false\022\024\n\005nodev\030\016 \001(\010:\005false\022\025\n\006noexe"
      "c\030\017 \001(\010:\005false\"F\n\003Exe\022\014\n\004path\030\001 \002(\t\022\013\n\003a"
      "rg\030\002 \003(\t\022\014\n\004arg0\030\003 \001(\t\022\026\n\007exec_fd\030\004 \001(\010:"
      "\005false\"\301\027\n\014NsJailConfig\022\016\n\004name\030\001 \001(\t:\000\022"
      "\023\n\013description\030\002 \003(\t\022 \n\004mode\030\003 \001(\0162\014.nsj"
      "ail.Mode:\004ONCE\022\030\n\010hostname\030\004 \001(\t:\006NSJAIL"
      "\022\016\n\003cwd\030\005 \001(\t:\001/\022\033\n\014no_pivotroot\030\006 \001(\010:\005"
      "false\022\017\n\004port\030\007 \001(\r:\0010\022\024\n\010bindhost\030\010 \001(\t"
      ":\002::\022\024\n\tmax_conns\030\t \001(\r:\0010\022\033\n\020max_conns_"
      "per_ip\030\n \001(\r:\0010\022\027\n\ntime_limit\030\013 \001(\r:\003600"
      "\022\025\n\006daemon\030\014 \001(\010:\005false\022\023\n\010max_cpus\030\r \001("
      "\r:\0010\022\016\n\006log_fd\030\016 \001(\005\022\020\n\010log_file\030\017 \001(\t\022#"
      "\n\tlog_level\030\020 \001(\0162\020.nsjail.LogLevel\022\027\n\010k"
      "eep_env\030\021 \001(\010:\005false\022\r\n\005envar\030\022 \003(\t\022\030\n\tk"
      "eep_caps\030\023 \001(\010:\005false\022\013\n\003cap\030\024 \003(\t\022\025\n\006si"
      "lent\030\025 \001(\010:\005false\022\032\n\013skip_setsid\030\026 \001(\010:\005"
      "false\022\035\n\016stderr_to_null\030\027 \001(\010:\005false\022\017\n\007"
      "pass_fd\030\030 \003(\005\022#\n\024disable_no_new_privs\030\031 "
      "\001(\010:\005false\022\027\n\trlimit_as\030\032 \001(\004:\0044096\022-\n\016r"
      "limit_as_type\030\033 \001(\0162\016.nsjail.RLimit:\005VAL"
      "UE\022\026\n\013rlimit_core\030\034 \001(\004:\0010\022/\n\020rlimit_cor"
      "e_type\030\035 \001(\0162\016.nsjail.RLimit:\005VALUE\022\027\n\nr"
      "limit_cpu\030\036 \001(\004:\003600\022.\n\017rlimit_cpu_type\030"
      "\037 \001(\0162\016.nsjail.RLimit:\005VALUE\022\027\n\014rlimit_f"
      "size\030  \001(\004:\0011\0220\n\021rlimit_fsize_type\030! \001(\016"
      "2\016.nsjail.RLimit:\005VALUE\022\031\n\rrlimit_nofile"
      "\030\" \001(\004:\00232\0221\n\022rlimit_nofile_type\030# \001(\0162\016"
      ".nsjail.RLimit:\005VALUE\022\032\n\014rlimit_nproc\030$ "
      "\001(\004:\0041024\022/\n\021rlimit_nproc_type\030% \001(\0162\016.n"
      "sjail.RLimit:\004SOFT\022\027\n\014rlimit_stack\030& \001(\004"
      ":\0018\022/\n\021rlimit_stack_type\030\' \001(\0162\016.nsjail."
      "RLimit:\004SOFT\022\032\n\016rlimit_memlock\030( \001(\004:\00264"
      "\0221\n\023rlimit_memlock_type\030) \001(\0162\016.nsjail.R"
      "Limit:\004SOFT\022\030\n\rrlimit_rtprio\030* \001(\004:\0010\0220\n"
      "\022rlimit_rtprio_type\030+ \001(\0162\016.nsjail.RLimi"
      "t:\004SOFT\022\035\n\017rlimit_msgqueue\030, \001(\004:\0041024\0222"
      "\n\024rlimit_msgqueue_type\030- \001(\0162\016.nsjail.RL"
      "imit:\004SOFT\022\031\n\ndisable_rl\030. \001(\010:\005false\022)\n"
      "\032persona_addr_compat_layout\030/ \001(\010:\005false"
      "\022%\n\026persona_mmap_page_zero\0300 \001(\010:\005false\022"
      "(\n\031persona_read_implies_exec\0301 \001(\010:\005fals"
      "e\022%\n\026persona_addr_limit_3gb\0302 \001(\010:\005false"
      "\022(\n\031persona_addr_no_randomize\0303 \001(\010:\005fal"
      "se\022\032\n\014clone_newnet\0304 \001(\010:\004true\022\033\n\rclone_"
      "newuser\0305 \001(\010:\004true\022\031\n\013clone_newns\0306 \001(\010"
      ":\004true\022\032\n\014clone_newpid\0307 \001(\010:\004true\022\032\n\014cl"
      "one_newipc\0308 \001(\010:\004true\022\032\n\014clone_newuts\0309"
      " \001(\010:\004true\022\035\n\017clone_newcgroup\030: \001(\010:\004tru"
      "e\022\034\n\rclone_newtime\030; \001(\010:\005false\022\035\n\006uidma"
      "p\030< \003(\0132\r.nsjail.IdMap\022\035\n\006gidmap\030= \003(\0132\r"
      ".nsjail.IdMap\022\031\n\nmount_proc\030> \001(\010:\005false"
      "\022\036\n\005mount\030\? \003(\0132\017.nsjail.MountPt\022\033\n\023secc"
      "omp_policy_file\030@ \001(\t\022\026\n\016seccomp_string\030"
      "A \003(\t\022\032\n\013seccomp_log\030B \001(\010:\005false\022\031\n\016cgr"
      "oup_mem_max\030C \001(\004:\0010\022\037\n\024cgroup_mem_memsw"
      "_max\030[ \001(\004:\0010\022\037\n\023cgroup_mem_swap_max\030\\ \001"
      "(\003:\002-1\022/\n\020cgroup_mem_mount\030D \001(\t:\025/sys/f"
      "s/cgroup/memory\022!\n\021cgroup_mem_parent\030E \001"
      "(\t:\006NSJAIL\022\032\n\017cgroup_pids_max\030F \001(\004:\0010\022."
      "\n\021cgroup_pids_mount\030G \001(\t:\023/sys/fs/cgrou"
      "p/pids\022\"\n\022cgroup_pids_parent\030H \001(\t:\006NSJA"
      "IL\022!\n\026cgroup_net_cls_classid\030I \001(\r:\0010\0224\n"
      "\024cgroup_net_cls_mount\030J \001(\t:\026/sys/fs/cgr"
      "oup/net_cls\022%\n\025cgroup_net_cls_parent\030K \001"
      "(\t:\006NSJAIL\022 \n\025cgroup_cpu_ms_per_sec\030L \001("
      "\r:\0010\022,\n\020cgroup_cpu_mount\030M \001(\t:\022/sys/fs/"
      "cgroup/cpu\022!\n\021cgroup_cpu_parent\030N \001(\t:\006N"
      "SJAIL\022&\n\016cgroupv2_mount\030O \001(\t:\016/sys/fs/c"
      "group\022\033\n\014use_cgroupv2\030P \001(\010:\005false\022\032\n\013if"
      "ace_no_lo\030Q \001(\010:\005false\022\021\n\tiface_own\030R \003("
      "\t\022\025\n\rmacvlan_iface\030S \001(\t\022\"\n\rmacvlan_vs_i"
      "p\030T \001(\t:\013192.168.0.2\022$\n\rmacvlan_vs_nm\030U "
      "\001(\t:\r255.255.255.0\022\"\n\rmacvlan_vs_gw\030V \001("
      "\t:\013192.168.0.1\022\027\n\rmacvlan_vs_ma\030W \001(\t:\000\022"
      "\036\n\rmacvlan_vs_mo\030X \001(\t:\007private\022\026\n\nnice_"
      "level\030Y \001(\005:\00219\022\035\n\010exec_bin\030Z \001(\0132\013.nsja"
      "il.Exe\022\032\n\013disable_tsc\030] \001(\010:\005false\022\036\n\017fo"
      "rward_signals\030^ \001(\010:\005false\022\036\n\017detect_cgr"
      "oupv2\030_ \001(\010:\005false*3\n\004Mode\022\n\n\006LISTEN\020\000\022\010"
      "\n\004ONCE\020\001\022\t\n\005RERUN\020\002\022\n\n\006EXECVE\020\003*B\n\010LogLe"
      "vel\022\t\n\005DEBUG\020\000\022\010\n\004INFO\020\001\022\013\n\007WARNING\020\002\022\t\n"
      "\005ERROR\020\003\022\t\n\005FATAL\020\004*0\n\006RLimit\022\t\n\005VALUE\020\000"
      "\022\010\n\004SOFT\020\001\022\010\n\004HARD\020\002\022\007\n\003INF\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3709);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_config_2eproto
namespace nsjail {
const ::google::protobuf::EnumDescriptor* Mode_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[0];
}
bool Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[1];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RLimit_descriptor() {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_2eproto::file_level_enum_descriptors[2];
}
bool RLimit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void IdMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdMap::kInsideIdFieldNumber;
const int IdMap::kOutsideIdFieldNumber;
const int IdMap::kCountFieldNumber;
const int IdMap::kUseNewidmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdMap::IdMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_IdMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nsjail.IdMap)
}
IdMap::IdMap(const IdMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inside_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inside_id()) {
    inside_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inside_id_);
  }
  outside_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_outside_id()) {
    outside_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outside_id_);
  }
  ::memcpy(&use_newidmap_, &from.use_newidmap_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&use_newidmap_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:nsjail.IdMap)
}

void IdMap::SharedCtor() {
  inside_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outside_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_newidmap_ = false;
  count_ = 1u;
}

IdMap::~IdMap() {
  // @@protoc_insertion_point(destructor:nsjail.IdMap)
  SharedDtor();
}

void IdMap::SharedDtor() {
  inside_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outside_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IdMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IdMap::descriptor() {
  ::protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdMap& IdMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_IdMap.base);
  return *internal_default_instance();
}


void IdMap::Clear() {
// @@protoc_insertion_point(message_clear_start:nsjail.IdMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      inside_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      outside_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    use_newidmap_ = false;
    count_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IdMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nsjail.IdMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inside_id = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inside_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inside_id().data(), static_cast<int>(this->inside_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.IdMap.inside_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string outside_id = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outside_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outside_id().data(), static_cast<int>(this->outside_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.IdMap.outside_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_newidmap = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_use_newidmap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_newidmap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nsjail.IdMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nsjail.IdMap)
  return false;
#undef DO_
}

void IdMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nsjail.IdMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string inside_id = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inside_id().data(), static_cast<int>(this->inside_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.IdMap.inside_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inside_id(), output);
  }

  // optional string outside_id = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outside_id().data(), static_cast<int>(this->outside_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.IdMap.outside_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->outside_id(), output);
  }

  // optional uint32 count = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional bool use_newidmap = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_newidmap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nsjail.IdMap)
}

::google::protobuf::uint8* IdMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nsjail.IdMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string inside_id = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inside_id().data(), static_cast<int>(this->inside_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.IdMap.inside_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inside_id(), target);
  }

  // optional string outside_id = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outside_id().data(), static_cast<int>(this->outside_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.IdMap.outside_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->outside_id(), target);
  }

  // optional uint32 count = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional bool use_newidmap = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_newidmap(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nsjail.IdMap)
  return target;
}

size_t IdMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nsjail.IdMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string inside_id = 1 [default = ""];
    if (has_inside_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inside_id());
    }

    // optional string outside_id = 2 [default = ""];
    if (has_outside_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outside_id());
    }

    // optional bool use_newidmap = 4 [default = false];
    if (has_use_newidmap()) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 3 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nsjail.IdMap)
  GOOGLE_DCHECK_NE(&from, this);
  const IdMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nsjail.IdMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nsjail.IdMap)
    MergeFrom(*source);
  }
}

void IdMap::MergeFrom(const IdMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nsjail.IdMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_inside_id();
      inside_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inside_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_outside_id();
      outside_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outside_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      use_newidmap_ = from.use_newidmap_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IdMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nsjail.IdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdMap::CopyFrom(const IdMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nsjail.IdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdMap::IsInitialized() const {
  return true;
}

void IdMap::Swap(IdMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdMap::InternalSwap(IdMap* other) {
  using std::swap;
  inside_id_.Swap(&other->inside_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  outside_id_.Swap(&other->outside_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(use_newidmap_, other->use_newidmap_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IdMap::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MountPt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MountPt::kSrcFieldNumber;
const int MountPt::kPrefixSrcEnvFieldNumber;
const int MountPt::kSrcContentFieldNumber;
const int MountPt::kDstFieldNumber;
const int MountPt::kPrefixDstEnvFieldNumber;
const int MountPt::kFstypeFieldNumber;
const int MountPt::kOptionsFieldNumber;
const int MountPt::kIsBindFieldNumber;
const int MountPt::kRwFieldNumber;
const int MountPt::kIsDirFieldNumber;
const int MountPt::kMandatoryFieldNumber;
const int MountPt::kIsSymlinkFieldNumber;
const int MountPt::kNosuidFieldNumber;
const int MountPt::kNodevFieldNumber;
const int MountPt::kNoexecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MountPt::MountPt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_MountPt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nsjail.MountPt)
}
MountPt::MountPt(const MountPt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src()) {
    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  prefix_src_env_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix_src_env()) {
    prefix_src_env_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_src_env_);
  }
  src_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_content()) {
    src_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_content_);
  }
  dst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dst()) {
    dst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_);
  }
  prefix_dst_env_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix_dst_env()) {
    prefix_dst_env_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_dst_env_);
  }
  fstype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fstype()) {
    fstype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fstype_);
  }
  options_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_options()) {
    options_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.options_);
  }
  ::memcpy(&is_bind_, &from.is_bind_,
    static_cast<size_t>(reinterpret_cast<char*>(&mandatory_) -
    reinterpret_cast<char*>(&is_bind_)) + sizeof(mandatory_));
  // @@protoc_insertion_point(copy_constructor:nsjail.MountPt)
}

void MountPt::SharedCtor() {
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_src_env_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_dst_env_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fstype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_bind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noexec_) -
      reinterpret_cast<char*>(&is_bind_)) + sizeof(noexec_));
  mandatory_ = true;
}

MountPt::~MountPt() {
  // @@protoc_insertion_point(destructor:nsjail.MountPt)
  SharedDtor();
}

void MountPt::SharedDtor() {
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_src_env_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_dst_env_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fstype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MountPt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MountPt::descriptor() {
  ::protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MountPt& MountPt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_MountPt.base);
  return *internal_default_instance();
}


void MountPt::Clear() {
// @@protoc_insertion_point(message_clear_start:nsjail.MountPt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      prefix_src_env_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      src_content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      dst_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      prefix_dst_env_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      fstype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      options_.ClearNonDefaultToEmptyNoArena();
    }
  }
  is_bind_ = false;
  if (cached_has_bits & 32512u) {
    ::memset(&rw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&noexec_) -
        reinterpret_cast<char*>(&rw_)) + sizeof(noexec_));
    mandatory_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MountPt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nsjail.MountPt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string src = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), static_cast<int>(this->src().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.MountPt.src");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prefix_src_env = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix_src_env()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix_src_env().data(), static_cast<int>(this->prefix_src_env().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.MountPt.prefix_src_env");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes src_content = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dst = 4 [default = ""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dst().data(), static_cast<int>(this->dst().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.MountPt.dst");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prefix_dst_env = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix_dst_env()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix_dst_env().data(), static_cast<int>(this->prefix_dst_env().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.MountPt.prefix_dst_env");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fstype = 6 [default = ""];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fstype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fstype().data(), static_cast<int>(this->fstype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.MountPt.fstype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string options = 7 [default = ""];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->options().data(), static_cast<int>(this->options().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.MountPt.options");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_bind = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_bind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rw = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_rw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dir = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_dir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mandatory = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_mandatory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mandatory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_symlink = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_symlink();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_symlink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool nosuid = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_nosuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nosuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool nodev = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_nodev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nodev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool noexec = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_noexec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noexec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nsjail.MountPt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nsjail.MountPt)
  return false;
#undef DO_
}

void MountPt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nsjail.MountPt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // optional string prefix_src_env = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix_src_env().data(), static_cast<int>(this->prefix_src_env().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.prefix_src_env");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefix_src_env(), output);
  }

  // optional bytes src_content = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->src_content(), output);
  }

  // required string dst = 4 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst().data(), static_cast<int>(this->dst().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.dst");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dst(), output);
  }

  // optional string prefix_dst_env = 5 [default = ""];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix_dst_env().data(), static_cast<int>(this->prefix_dst_env().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.prefix_dst_env");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->prefix_dst_env(), output);
  }

  // optional string fstype = 6 [default = ""];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fstype().data(), static_cast<int>(this->fstype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.fstype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fstype(), output);
  }

  // optional string options = 7 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options().data(), static_cast<int>(this->options().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->options(), output);
  }

  // optional bool is_bind = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_bind(), output);
  }

  // optional bool rw = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->rw(), output);
  }

  // optional bool is_dir = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_dir(), output);
  }

  // optional bool mandatory = 11 [default = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->mandatory(), output);
  }

  // optional bool is_symlink = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_symlink(), output);
  }

  // optional bool nosuid = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->nosuid(), output);
  }

  // optional bool nodev = 14 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->nodev(), output);
  }

  // optional bool noexec = 15 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->noexec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nsjail.MountPt)
}

::google::protobuf::uint8* MountPt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nsjail.MountPt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // optional string prefix_src_env = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix_src_env().data(), static_cast<int>(this->prefix_src_env().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.prefix_src_env");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prefix_src_env(), target);
  }

  // optional bytes src_content = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->src_content(), target);
  }

  // required string dst = 4 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst().data(), static_cast<int>(this->dst().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.dst");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dst(), target);
  }

  // optional string prefix_dst_env = 5 [default = ""];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix_dst_env().data(), static_cast<int>(this->prefix_dst_env().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.prefix_dst_env");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prefix_dst_env(), target);
  }

  // optional string fstype = 6 [default = ""];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fstype().data(), static_cast<int>(this->fstype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.fstype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fstype(), target);
  }

  // optional string options = 7 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options().data(), static_cast<int>(this->options().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.MountPt.options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->options(), target);
  }

  // optional bool is_bind = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_bind(), target);
  }

  // optional bool rw = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->rw(), target);
  }

  // optional bool is_dir = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_dir(), target);
  }

  // optional bool mandatory = 11 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->mandatory(), target);
  }

  // optional bool is_symlink = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_symlink(), target);
  }

  // optional bool nosuid = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->nosuid(), target);
  }

  // optional bool nodev = 14 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->nodev(), target);
  }

  // optional bool noexec = 15 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->noexec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nsjail.MountPt)
  return target;
}

size_t MountPt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nsjail.MountPt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string dst = 4 [default = ""];
  if (has_dst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string src = 1 [default = ""];
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // optional string prefix_src_env = 2 [default = ""];
    if (has_prefix_src_env()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix_src_env());
    }

    // optional bytes src_content = 3 [default = ""];
    if (has_src_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_content());
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional string prefix_dst_env = 5 [default = ""];
    if (has_prefix_dst_env()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix_dst_env());
    }

    // optional string fstype = 6 [default = ""];
    if (has_fstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fstype());
    }

    // optional string options = 7 [default = ""];
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->options());
    }

    // optional bool is_bind = 8 [default = false];
    if (has_is_bind()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool rw = 9 [default = false];
    if (has_rw()) {
      total_size += 1 + 1;
    }

    // optional bool is_dir = 10;
    if (has_is_dir()) {
      total_size += 1 + 1;
    }

    // optional bool is_symlink = 12 [default = false];
    if (has_is_symlink()) {
      total_size += 1 + 1;
    }

    // optional bool nosuid = 13 [default = false];
    if (has_nosuid()) {
      total_size += 1 + 1;
    }

    // optional bool nodev = 14 [default = false];
    if (has_nodev()) {
      total_size += 1 + 1;
    }

    // optional bool noexec = 15 [default = false];
    if (has_noexec()) {
      total_size += 1 + 1;
    }

    // optional bool mandatory = 11 [default = true];
    if (has_mandatory()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MountPt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nsjail.MountPt)
  GOOGLE_DCHECK_NE(&from, this);
  const MountPt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MountPt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nsjail.MountPt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nsjail.MountPt)
    MergeFrom(*source);
  }
}

void MountPt::MergeFrom(const MountPt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nsjail.MountPt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src();
      src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_prefix_src_env();
      prefix_src_env_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_src_env_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_src_content();
      src_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_content_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_dst();
      dst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_prefix_dst_env();
      prefix_dst_env_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_dst_env_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_fstype();
      fstype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fstype_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_options();
      options_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.options_);
    }
    if (cached_has_bits & 0x00000080u) {
      is_bind_ = from.is_bind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      rw_ = from.rw_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_dir_ = from.is_dir_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_symlink_ = from.is_symlink_;
    }
    if (cached_has_bits & 0x00000800u) {
      nosuid_ = from.nosuid_;
    }
    if (cached_has_bits & 0x00001000u) {
      nodev_ = from.nodev_;
    }
    if (cached_has_bits & 0x00002000u) {
      noexec_ = from.noexec_;
    }
    if (cached_has_bits & 0x00004000u) {
      mandatory_ = from.mandatory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MountPt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nsjail.MountPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountPt::CopyFrom(const MountPt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nsjail.MountPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountPt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void MountPt::Swap(MountPt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MountPt::InternalSwap(MountPt* other) {
  using std::swap;
  src_.Swap(&other->src_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefix_src_env_.Swap(&other->prefix_src_env_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_content_.Swap(&other->src_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dst_.Swap(&other->dst_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefix_dst_env_.Swap(&other->prefix_dst_env_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fstype_.Swap(&other->fstype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  options_.Swap(&other->options_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_bind_, other->is_bind_);
  swap(rw_, other->rw_);
  swap(is_dir_, other->is_dir_);
  swap(is_symlink_, other->is_symlink_);
  swap(nosuid_, other->nosuid_);
  swap(nodev_, other->nodev_);
  swap(noexec_, other->noexec_);
  swap(mandatory_, other->mandatory_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MountPt::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Exe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Exe::kPathFieldNumber;
const int Exe::kArgFieldNumber;
const int Exe::kArg0FieldNumber;
const int Exe::kExecFdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Exe::Exe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_Exe.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nsjail.Exe)
}
Exe::Exe(const Exe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      arg_(from.arg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  arg0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_arg0()) {
    arg0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg0_);
  }
  exec_fd_ = from.exec_fd_;
  // @@protoc_insertion_point(copy_constructor:nsjail.Exe)
}

void Exe::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exec_fd_ = false;
}

Exe::~Exe() {
  // @@protoc_insertion_point(destructor:nsjail.Exe)
  SharedDtor();
}

void Exe::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arg0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Exe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Exe::descriptor() {
  ::protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Exe& Exe::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_Exe.base);
  return *internal_default_instance();
}


void Exe::Clear() {
// @@protoc_insertion_point(message_clear_start:nsjail.Exe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      arg0_.ClearNonDefaultToEmptyNoArena();
    }
  }
  exec_fd_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Exe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nsjail.Exe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.Exe.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string arg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg(this->arg_size() - 1).data(),
            static_cast<int>(this->arg(this->arg_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.Exe.arg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string arg0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg0()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arg0().data(), static_cast<int>(this->arg0().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.Exe.arg0");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exec_fd = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_exec_fd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exec_fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nsjail.Exe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nsjail.Exe)
  return false;
#undef DO_
}

void Exe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nsjail.Exe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.Exe.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // repeated string arg = 2;
  for (int i = 0, n = this->arg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg(i).data(), static_cast<int>(this->arg(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.Exe.arg");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->arg(i), output);
  }

  // optional string arg0 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg0().data(), static_cast<int>(this->arg0().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.Exe.arg0");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->arg0(), output);
  }

  // optional bool exec_fd = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->exec_fd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nsjail.Exe)
}

::google::protobuf::uint8* Exe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nsjail.Exe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.Exe.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // repeated string arg = 2;
  for (int i = 0, n = this->arg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg(i).data(), static_cast<int>(this->arg(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.Exe.arg");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->arg(i), target);
  }

  // optional string arg0 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arg0().data(), static_cast<int>(this->arg0().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.Exe.arg0");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->arg0(), target);
  }

  // optional bool exec_fd = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->exec_fd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nsjail.Exe)
  return target;
}

size_t Exe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nsjail.Exe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string path = 1;
  if (has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }
  // repeated string arg = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->arg_size());
  for (int i = 0, n = this->arg_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arg(i));
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional string arg0 = 3;
    if (has_arg0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arg0());
    }

    // optional bool exec_fd = 4 [default = false];
    if (has_exec_fd()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Exe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nsjail.Exe)
  GOOGLE_DCHECK_NE(&from, this);
  const Exe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Exe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nsjail.Exe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nsjail.Exe)
    MergeFrom(*source);
  }
}

void Exe::MergeFrom(const Exe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nsjail.Exe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arg_.MergeFrom(from.arg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_arg0();
      arg0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arg0_);
    }
    if (cached_has_bits & 0x00000004u) {
      exec_fd_ = from.exec_fd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Exe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nsjail.Exe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exe::CopyFrom(const Exe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nsjail.Exe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Exe::Swap(Exe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Exe::InternalSwap(Exe* other) {
  using std::swap;
  arg_.InternalSwap(CastToBase(&other->arg_));
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  arg0_.Swap(&other->arg0_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exec_fd_, other->exec_fd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Exe::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NsJailConfig::InitAsDefaultInstance() {
  ::nsjail::_NsJailConfig_default_instance_._instance.get_mutable()->exec_bin_ = const_cast< ::nsjail::Exe*>(
      ::nsjail::Exe::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NsJailConfig::kNameFieldNumber;
const int NsJailConfig::kDescriptionFieldNumber;
const int NsJailConfig::kModeFieldNumber;
const int NsJailConfig::kHostnameFieldNumber;
const int NsJailConfig::kCwdFieldNumber;
const int NsJailConfig::kNoPivotrootFieldNumber;
const int NsJailConfig::kPortFieldNumber;
const int NsJailConfig::kBindhostFieldNumber;
const int NsJailConfig::kMaxConnsFieldNumber;
const int NsJailConfig::kMaxConnsPerIpFieldNumber;
const int NsJailConfig::kTimeLimitFieldNumber;
const int NsJailConfig::kDaemonFieldNumber;
const int NsJailConfig::kMaxCpusFieldNumber;
const int NsJailConfig::kLogFdFieldNumber;
const int NsJailConfig::kLogFileFieldNumber;
const int NsJailConfig::kLogLevelFieldNumber;
const int NsJailConfig::kKeepEnvFieldNumber;
const int NsJailConfig::kEnvarFieldNumber;
const int NsJailConfig::kKeepCapsFieldNumber;
const int NsJailConfig::kCapFieldNumber;
const int NsJailConfig::kSilentFieldNumber;
const int NsJailConfig::kSkipSetsidFieldNumber;
const int NsJailConfig::kStderrToNullFieldNumber;
const int NsJailConfig::kPassFdFieldNumber;
const int NsJailConfig::kDisableNoNewPrivsFieldNumber;
const int NsJailConfig::kRlimitAsFieldNumber;
const int NsJailConfig::kRlimitAsTypeFieldNumber;
const int NsJailConfig::kRlimitCoreFieldNumber;
const int NsJailConfig::kRlimitCoreTypeFieldNumber;
const int NsJailConfig::kRlimitCpuFieldNumber;
const int NsJailConfig::kRlimitCpuTypeFieldNumber;
const int NsJailConfig::kRlimitFsizeFieldNumber;
const int NsJailConfig::kRlimitFsizeTypeFieldNumber;
const int NsJailConfig::kRlimitNofileFieldNumber;
const int NsJailConfig::kRlimitNofileTypeFieldNumber;
const int NsJailConfig::kRlimitNprocFieldNumber;
const int NsJailConfig::kRlimitNprocTypeFieldNumber;
const int NsJailConfig::kRlimitStackFieldNumber;
const int NsJailConfig::kRlimitStackTypeFieldNumber;
const int NsJailConfig::kRlimitMemlockFieldNumber;
const int NsJailConfig::kRlimitMemlockTypeFieldNumber;
const int NsJailConfig::kRlimitRtprioFieldNumber;
const int NsJailConfig::kRlimitRtprioTypeFieldNumber;
const int NsJailConfig::kRlimitMsgqueueFieldNumber;
const int NsJailConfig::kRlimitMsgqueueTypeFieldNumber;
const int NsJailConfig::kDisableRlFieldNumber;
const int NsJailConfig::kPersonaAddrCompatLayoutFieldNumber;
const int NsJailConfig::kPersonaMmapPageZeroFieldNumber;
const int NsJailConfig::kPersonaReadImpliesExecFieldNumber;
const int NsJailConfig::kPersonaAddrLimit3GbFieldNumber;
const int NsJailConfig::kPersonaAddrNoRandomizeFieldNumber;
const int NsJailConfig::kCloneNewnetFieldNumber;
const int NsJailConfig::kCloneNewuserFieldNumber;
const int NsJailConfig::kCloneNewnsFieldNumber;
const int NsJailConfig::kCloneNewpidFieldNumber;
const int NsJailConfig::kCloneNewipcFieldNumber;
const int NsJailConfig::kCloneNewutsFieldNumber;
const int NsJailConfig::kCloneNewcgroupFieldNumber;
const int NsJailConfig::kCloneNewtimeFieldNumber;
const int NsJailConfig::kUidmapFieldNumber;
const int NsJailConfig::kGidmapFieldNumber;
const int NsJailConfig::kMountProcFieldNumber;
const int NsJailConfig::kMountFieldNumber;
const int NsJailConfig::kSeccompPolicyFileFieldNumber;
const int NsJailConfig::kSeccompStringFieldNumber;
const int NsJailConfig::kSeccompLogFieldNumber;
const int NsJailConfig::kCgroupMemMaxFieldNumber;
const int NsJailConfig::kCgroupMemMemswMaxFieldNumber;
const int NsJailConfig::kCgroupMemSwapMaxFieldNumber;
const int NsJailConfig::kCgroupMemMountFieldNumber;
const int NsJailConfig::kCgroupMemParentFieldNumber;
const int NsJailConfig::kCgroupPidsMaxFieldNumber;
const int NsJailConfig::kCgroupPidsMountFieldNumber;
const int NsJailConfig::kCgroupPidsParentFieldNumber;
const int NsJailConfig::kCgroupNetClsClassidFieldNumber;
const int NsJailConfig::kCgroupNetClsMountFieldNumber;
const int NsJailConfig::kCgroupNetClsParentFieldNumber;
const int NsJailConfig::kCgroupCpuMsPerSecFieldNumber;
const int NsJailConfig::kCgroupCpuMountFieldNumber;
const int NsJailConfig::kCgroupCpuParentFieldNumber;
const int NsJailConfig::kCgroupv2MountFieldNumber;
const int NsJailConfig::kUseCgroupv2FieldNumber;
const int NsJailConfig::kIfaceNoLoFieldNumber;
const int NsJailConfig::kIfaceOwnFieldNumber;
const int NsJailConfig::kMacvlanIfaceFieldNumber;
const int NsJailConfig::kMacvlanVsIpFieldNumber;
const int NsJailConfig::kMacvlanVsNmFieldNumber;
const int NsJailConfig::kMacvlanVsGwFieldNumber;
const int NsJailConfig::kMacvlanVsMaFieldNumber;
const int NsJailConfig::kMacvlanVsMoFieldNumber;
const int NsJailConfig::kNiceLevelFieldNumber;
const int NsJailConfig::kExecBinFieldNumber;
const int NsJailConfig::kDisableTscFieldNumber;
const int NsJailConfig::kForwardSignalsFieldNumber;
const int NsJailConfig::kDetectCgroupv2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NsJailConfig::NsJailConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_NsJailConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nsjail.NsJailConfig)
}
NsJailConfig::NsJailConfig(const NsJailConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      envar_(from.envar_),
      cap_(from.cap_),
      pass_fd_(from.pass_fd_),
      uidmap_(from.uidmap_),
      gidmap_(from.gidmap_),
      mount_(from.mount_),
      seccomp_string_(from.seccomp_string_),
      iface_own_(from.iface_own_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hostname_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get(), from.hostname_);
  }
  cwd_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get());
  if (from.has_cwd()) {
    cwd_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get(), from.cwd_);
  }
  bindhost_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get());
  if (from.has_bindhost()) {
    bindhost_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get(), from.bindhost_);
  }
  log_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_log_file()) {
    log_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_file_);
  }
  seccomp_policy_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_seccomp_policy_file()) {
    seccomp_policy_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seccomp_policy_file_);
  }
  cgroup_mem_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get());
  if (from.has_cgroup_mem_mount()) {
    cgroup_mem_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get(), from.cgroup_mem_mount_);
  }
  cgroup_mem_parent_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get());
  if (from.has_cgroup_mem_parent()) {
    cgroup_mem_parent_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get(), from.cgroup_mem_parent_);
  }
  cgroup_pids_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get());
  if (from.has_cgroup_pids_mount()) {
    cgroup_pids_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get(), from.cgroup_pids_mount_);
  }
  cgroup_pids_parent_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get());
  if (from.has_cgroup_pids_parent()) {
    cgroup_pids_parent_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get(), from.cgroup_pids_parent_);
  }
  cgroup_net_cls_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get());
  if (from.has_cgroup_net_cls_mount()) {
    cgroup_net_cls_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get(), from.cgroup_net_cls_mount_);
  }
  cgroup_net_cls_parent_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get());
  if (from.has_cgroup_net_cls_parent()) {
    cgroup_net_cls_parent_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get(), from.cgroup_net_cls_parent_);
  }
  cgroup_cpu_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get());
  if (from.has_cgroup_cpu_mount()) {
    cgroup_cpu_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get(), from.cgroup_cpu_mount_);
  }
  cgroup_cpu_parent_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get());
  if (from.has_cgroup_cpu_parent()) {
    cgroup_cpu_parent_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get(), from.cgroup_cpu_parent_);
  }
  cgroupv2_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get());
  if (from.has_cgroupv2_mount()) {
    cgroupv2_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get(), from.cgroupv2_mount_);
  }
  macvlan_iface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macvlan_iface()) {
    macvlan_iface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macvlan_iface_);
  }
  macvlan_vs_ip_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get());
  if (from.has_macvlan_vs_ip()) {
    macvlan_vs_ip_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get(), from.macvlan_vs_ip_);
  }
  macvlan_vs_nm_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get());
  if (from.has_macvlan_vs_nm()) {
    macvlan_vs_nm_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get(), from.macvlan_vs_nm_);
  }
  macvlan_vs_gw_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get());
  if (from.has_macvlan_vs_gw()) {
    macvlan_vs_gw_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get(), from.macvlan_vs_gw_);
  }
  macvlan_vs_ma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macvlan_vs_ma()) {
    macvlan_vs_ma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macvlan_vs_ma_);
  }
  macvlan_vs_mo_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get());
  if (from.has_macvlan_vs_mo()) {
    macvlan_vs_mo_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get(), from.macvlan_vs_mo_);
  }
  if (from.has_exec_bin()) {
    exec_bin_ = new ::nsjail::Exe(*from.exec_bin_);
  } else {
    exec_bin_ = NULL;
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&cgroup_mem_swap_max_) -
    reinterpret_cast<char*>(&port_)) + sizeof(cgroup_mem_swap_max_));
  // @@protoc_insertion_point(copy_constructor:nsjail.NsJailConfig)
}

void NsJailConfig::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get());
  cwd_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get());
  bindhost_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get());
  log_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seccomp_policy_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgroup_mem_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get());
  cgroup_mem_parent_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get());
  cgroup_pids_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get());
  cgroup_pids_parent_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get());
  cgroup_net_cls_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get());
  cgroup_net_cls_parent_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get());
  cgroup_cpu_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get());
  cgroup_cpu_parent_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get());
  cgroupv2_mount_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get());
  macvlan_iface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macvlan_vs_ip_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get());
  macvlan_vs_nm_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get());
  macvlan_vs_gw_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get());
  macvlan_vs_ma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macvlan_vs_mo_.UnsafeSetDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get());
  ::memset(&exec_bin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detect_cgroupv2_) -
      reinterpret_cast<char*>(&exec_bin_)) + sizeof(detect_cgroupv2_));
  mode_ = 1;
  time_limit_ = 600u;
  rlimit_as_ = GOOGLE_ULONGLONG(4096);
  rlimit_cpu_ = GOOGLE_ULONGLONG(600);
  rlimit_fsize_ = GOOGLE_ULONGLONG(1);
  rlimit_nofile_ = GOOGLE_ULONGLONG(32);
  rlimit_nproc_ = GOOGLE_ULONGLONG(1024);
  rlimit_stack_ = GOOGLE_ULONGLONG(8);
  rlimit_nproc_type_ = 1;
  rlimit_stack_type_ = 1;
  rlimit_memlock_ = GOOGLE_ULONGLONG(64);
  rlimit_memlock_type_ = 1;
  rlimit_rtprio_type_ = 1;
  rlimit_msgqueue_ = GOOGLE_ULONGLONG(1024);
  rlimit_msgqueue_type_ = 1;
  clone_newnet_ = true;
  clone_newuser_ = true;
  clone_newns_ = true;
  clone_newpid_ = true;
  clone_newipc_ = true;
  clone_newuts_ = true;
  clone_newcgroup_ = true;
  nice_level_ = 19;
  cgroup_mem_swap_max_ = GOOGLE_LONGLONG(-1);
}

NsJailConfig::~NsJailConfig() {
  // @@protoc_insertion_point(destructor:nsjail.NsJailConfig)
  SharedDtor();
}

void NsJailConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get());
  cwd_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get());
  bindhost_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get());
  log_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seccomp_policy_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgroup_mem_mount_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get());
  cgroup_mem_parent_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get());
  cgroup_pids_mount_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get());
  cgroup_pids_parent_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get());
  cgroup_net_cls_mount_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get());
  cgroup_net_cls_parent_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get());
  cgroup_cpu_mount_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get());
  cgroup_cpu_parent_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get());
  cgroupv2_mount_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get());
  macvlan_iface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macvlan_vs_ip_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get());
  macvlan_vs_nm_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get());
  macvlan_vs_gw_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get());
  macvlan_vs_ma_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macvlan_vs_mo_.DestroyNoArena(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get());
  if (this != internal_default_instance()) delete exec_bin_;
}

void NsJailConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NsJailConfig::descriptor() {
  ::protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NsJailConfig& NsJailConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_NsJailConfig.base);
  return *internal_default_instance();
}


void NsJailConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:nsjail.NsJailConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  envar_.Clear();
  cap_.Clear();
  pass_fd_.Clear();
  uidmap_.Clear();
  gidmap_.Clear();
  mount_.Clear();
  seccomp_string_.Clear();
  iface_own_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hostname_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      cwd_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      bindhost_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get());
    }
    if (cached_has_bits & 0x00000010u) {
      log_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      seccomp_policy_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      cgroup_mem_mount_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get());
    }
    if (cached_has_bits & 0x00000080u) {
      cgroup_mem_parent_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      cgroup_pids_mount_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get());
    }
    if (cached_has_bits & 0x00000200u) {
      cgroup_pids_parent_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get());
    }
    if (cached_has_bits & 0x00000400u) {
      cgroup_net_cls_mount_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get());
    }
    if (cached_has_bits & 0x00000800u) {
      cgroup_net_cls_parent_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get());
    }
    if (cached_has_bits & 0x00001000u) {
      cgroup_cpu_mount_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get());
    }
    if (cached_has_bits & 0x00002000u) {
      cgroup_cpu_parent_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get());
    }
    if (cached_has_bits & 0x00004000u) {
      cgroupv2_mount_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get());
    }
    if (cached_has_bits & 0x00008000u) {
      macvlan_iface_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      macvlan_vs_ip_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get());
    }
    if (cached_has_bits & 0x00020000u) {
      macvlan_vs_nm_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get());
    }
    if (cached_has_bits & 0x00040000u) {
      macvlan_vs_gw_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get());
    }
    if (cached_has_bits & 0x00080000u) {
      macvlan_vs_ma_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00100000u) {
      macvlan_vs_mo_.UnsafeMutablePointer()->assign(*&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get());
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(exec_bin_ != NULL);
      exec_bin_->Clear();
    }
  }
  if (cached_has_bits & 12582912u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_conns_) -
        reinterpret_cast<char*>(&port_)) + sizeof(max_conns_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&max_conns_per_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&log_level_) -
        reinterpret_cast<char*>(&max_conns_per_ip_)) + sizeof(log_level_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&silent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rlimit_cpu_type_) -
        reinterpret_cast<char*>(&silent_)) + sizeof(rlimit_cpu_type_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&rlimit_fsize_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&persona_addr_limit_3gb_) -
        reinterpret_cast<char*>(&rlimit_fsize_type_)) + sizeof(persona_addr_limit_3gb_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&persona_addr_no_randomize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seccomp_log_) -
        reinterpret_cast<char*>(&persona_addr_no_randomize_)) + sizeof(seccomp_log_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&use_cgroupv2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&detect_cgroupv2_) -
        reinterpret_cast<char*>(&use_cgroupv2_)) + sizeof(detect_cgroupv2_));
    mode_ = 1;
    time_limit_ = 600u;
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 255u) {
    rlimit_as_ = GOOGLE_ULONGLONG(4096);
    rlimit_cpu_ = GOOGLE_ULONGLONG(600);
    rlimit_fsize_ = GOOGLE_ULONGLONG(1);
    rlimit_nofile_ = GOOGLE_ULONGLONG(32);
    rlimit_nproc_ = GOOGLE_ULONGLONG(1024);
    rlimit_stack_ = GOOGLE_ULONGLONG(8);
    rlimit_nproc_type_ = 1;
    rlimit_stack_type_ = 1;
  }
  if (cached_has_bits & 65280u) {
    rlimit_memlock_ = GOOGLE_ULONGLONG(64);
    rlimit_memlock_type_ = 1;
    rlimit_rtprio_type_ = 1;
    rlimit_msgqueue_ = GOOGLE_ULONGLONG(1024);
    rlimit_msgqueue_type_ = 1;
    clone_newnet_ = true;
    clone_newuser_ = true;
    clone_newns_ = true;
  }
  if (cached_has_bits & 4128768u) {
    clone_newpid_ = true;
    clone_newipc_ = true;
    clone_newuts_ = true;
    clone_newcgroup_ = true;
    nice_level_ = 19;
    cgroup_mem_swap_max_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NsJailConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nsjail.NsJailConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description(this->description_size() - 1).data(),
            static_cast<int>(this->description(this->description_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.Mode mode = 3 [default = ONCE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::Mode_IsValid(value)) {
            set_mode(static_cast< ::nsjail::Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hostname = 4 [default = "NSJAIL"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cwd = 5 [default = "/"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cwd().data(), static_cast<int>(this->cwd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_pivotroot = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_no_pivotroot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_pivotroot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bindhost = 8 [default = "::"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindhost().data(), static_cast<int>(this->bindhost().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.bindhost");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_conns = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_max_conns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_conns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_conns_per_ip = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_max_conns_per_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_conns_per_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_limit = 11 [default = 600];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_time_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool daemon = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_daemon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &daemon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_cpus = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_max_cpus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cpus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 log_fd = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_log_fd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string log_file = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_file().data(), static_cast<int>(this->log_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.log_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.LogLevel log_level = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::LogLevel_IsValid(value)) {
            set_log_level(static_cast< ::nsjail::LogLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keep_env = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_keep_env();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_env_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string envar = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_envar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->envar(this->envar_size() - 1).data(),
            static_cast<int>(this->envar(this->envar_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.envar");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keep_caps = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_keep_caps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_caps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cap = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cap(this->cap_size() - 1).data(),
            static_cast<int>(this->cap(this->cap_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cap");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool silent = 21 [default = false];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_silent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_setsid = 22 [default = false];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_skip_setsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_setsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stderr_to_null = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_stderr_to_null();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stderr_to_null_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pass_fd = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192u, input, this->mutable_pass_fd())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pass_fd())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_no_new_privs = 25 [default = false];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_disable_no_new_privs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_no_new_privs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_as = 26 [default = 4096];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_rlimit_as();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_as_type = 27 [default = VALUE];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_as_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                27, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_core = 28 [default = 0];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_rlimit_core();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_core_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_core_type = 29 [default = VALUE];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_core_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                29, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_cpu = 30 [default = 600];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_rlimit_cpu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_cpu_type = 31 [default = VALUE];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_cpu_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_fsize = 32 [default = 1];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_rlimit_fsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_fsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_fsize_type = 33 [default = VALUE];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_fsize_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                33, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_nofile = 34 [default = 32];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_rlimit_nofile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_nofile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_nofile_type = 35 [default = VALUE];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_nofile_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                35, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_nproc = 36 [default = 1024];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_rlimit_nproc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_nproc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_nproc_type = 37 [default = SOFT];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_nproc_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                37, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_stack = 38 [default = 8];
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_rlimit_stack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_stack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_stack_type = 39 [default = SOFT];
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_stack_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                39, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_memlock = 40 [default = 64];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_rlimit_memlock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_memlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_memlock_type = 41 [default = SOFT];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_memlock_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                41, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_rtprio = 42 [default = 0];
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_rlimit_rtprio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_rtprio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_rtprio_type = 43 [default = SOFT];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_rtprio_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                43, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rlimit_msgqueue = 44 [default = 1024];
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_rlimit_msgqueue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rlimit_msgqueue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.RLimit rlimit_msgqueue_type = 45 [default = SOFT];
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nsjail::RLimit_IsValid(value)) {
            set_rlimit_msgqueue_type(static_cast< ::nsjail::RLimit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                45, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_rl = 46 [default = false];
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_disable_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_addr_compat_layout = 47 [default = false];
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_persona_addr_compat_layout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_addr_compat_layout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_mmap_page_zero = 48 [default = false];
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_persona_mmap_page_zero();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_mmap_page_zero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_read_implies_exec = 49 [default = false];
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_persona_read_implies_exec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_read_implies_exec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_addr_limit_3gb = 50 [default = false];
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_persona_addr_limit_3gb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_addr_limit_3gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_addr_no_randomize = 51 [default = false];
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_persona_addr_no_randomize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_addr_no_randomize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clone_newnet = 52 [default = true];
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_clone_newnet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clone_newnet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clone_newuser = 53 [default = true];
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_clone_newuser();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clone_newuser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clone_newns = 54 [default = true];
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_clone_newns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clone_newns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clone_newpid = 55 [default = true];
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_clone_newpid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clone_newpid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clone_newipc = 56 [default = true];
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_clone_newipc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clone_newipc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clone_newuts = 57 [default = true];
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_clone_newuts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clone_newuts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clone_newcgroup = 58 [default = true];
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_clone_newcgroup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clone_newcgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clone_newtime = 59 [default = false];
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          set_has_clone_newtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clone_newtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nsjail.IdMap uidmap = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_uidmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nsjail.IdMap gidmap = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gidmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mount_proc = 62 [default = false];
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_mount_proc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mount_proc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nsjail.MountPt mount = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 506 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string seccomp_policy_file = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seccomp_policy_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seccomp_policy_file().data(), static_cast<int>(this->seccomp_policy_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.seccomp_policy_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string seccomp_string = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 522 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_seccomp_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seccomp_string(this->seccomp_string_size() - 1).data(),
            static_cast<int>(this->seccomp_string(this->seccomp_string_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.seccomp_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool seccomp_log = 66 [default = false];
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          set_has_seccomp_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seccomp_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cgroup_mem_max = 67 [default = 0];
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {
          set_has_cgroup_mem_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cgroup_mem_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroup_mem_mount = 68 [default = "/sys/fs/cgroup/memory"];
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 546 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroup_mem_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroup_mem_mount().data(), static_cast<int>(this->cgroup_mem_mount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroup_mem_mount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroup_mem_parent = 69 [default = "NSJAIL"];
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroup_mem_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroup_mem_parent().data(), static_cast<int>(this->cgroup_mem_parent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroup_mem_parent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cgroup_pids_max = 70 [default = 0];
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_cgroup_pids_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cgroup_pids_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroup_pids_mount = 71 [default = "/sys/fs/cgroup/pids"];
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroup_pids_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroup_pids_mount().data(), static_cast<int>(this->cgroup_pids_mount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroup_pids_mount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroup_pids_parent = 72 [default = "NSJAIL"];
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 578 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroup_pids_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroup_pids_parent().data(), static_cast<int>(this->cgroup_pids_parent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroup_pids_parent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cgroup_net_cls_classid = 73 [default = 0];
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 584 & 0xFF */)) {
          set_has_cgroup_net_cls_classid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cgroup_net_cls_classid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroup_net_cls_mount = 74 [default = "/sys/fs/cgroup/net_cls"];
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroup_net_cls_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroup_net_cls_mount().data(), static_cast<int>(this->cgroup_net_cls_mount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroup_net_cls_mount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroup_net_cls_parent = 75 [default = "NSJAIL"];
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroup_net_cls_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroup_net_cls_parent().data(), static_cast<int>(this->cgroup_net_cls_parent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroup_net_cls_parent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cgroup_cpu_ms_per_sec = 76 [default = 0];
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 608 & 0xFF */)) {
          set_has_cgroup_cpu_ms_per_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cgroup_cpu_ms_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroup_cpu_mount = 77 [default = "/sys/fs/cgroup/cpu"];
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 618 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroup_cpu_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroup_cpu_mount().data(), static_cast<int>(this->cgroup_cpu_mount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroup_cpu_mount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroup_cpu_parent = 78 [default = "NSJAIL"];
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroup_cpu_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroup_cpu_parent().data(), static_cast<int>(this->cgroup_cpu_parent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroup_cpu_parent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cgroupv2_mount = 79 [default = "/sys/fs/cgroup"];
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 634 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgroupv2_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cgroupv2_mount().data(), static_cast<int>(this->cgroupv2_mount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.cgroupv2_mount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_cgroupv2 = 80 [default = false];
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {
          set_has_use_cgroupv2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cgroupv2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool iface_no_lo = 81 [default = false];
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 648 & 0xFF */)) {
          set_has_iface_no_lo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iface_no_lo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string iface_own = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_iface_own()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iface_own(this->iface_own_size() - 1).data(),
            static_cast<int>(this->iface_own(this->iface_own_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.iface_own");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string macvlan_iface = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macvlan_iface()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macvlan_iface().data(), static_cast<int>(this->macvlan_iface().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.macvlan_iface");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string macvlan_vs_ip = 84 [default = "192.168.0.2"];
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macvlan_vs_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macvlan_vs_ip().data(), static_cast<int>(this->macvlan_vs_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.macvlan_vs_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string macvlan_vs_nm = 85 [default = "255.255.255.0"];
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 682 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macvlan_vs_nm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macvlan_vs_nm().data(), static_cast<int>(this->macvlan_vs_nm().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.macvlan_vs_nm");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string macvlan_vs_gw = 86 [default = "192.168.0.1"];
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 690 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macvlan_vs_gw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macvlan_vs_gw().data(), static_cast<int>(this->macvlan_vs_gw().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.macvlan_vs_gw");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string macvlan_vs_ma = 87 [default = ""];
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 698 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macvlan_vs_ma()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macvlan_vs_ma().data(), static_cast<int>(this->macvlan_vs_ma().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.macvlan_vs_ma");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string macvlan_vs_mo = 88 [default = "private"];
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 706 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macvlan_vs_mo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macvlan_vs_mo().data(), static_cast<int>(this->macvlan_vs_mo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nsjail.NsJailConfig.macvlan_vs_mo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nice_level = 89 [default = 19];
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 712 & 0xFF */)) {
          set_has_nice_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nice_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .nsjail.Exe exec_bin = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exec_bin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cgroup_mem_memsw_max = 91 [default = 0];
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 728 & 0xFF */)) {
          set_has_cgroup_mem_memsw_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cgroup_mem_memsw_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cgroup_mem_swap_max = 92 [default = -1];
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 736 & 0xFF */)) {
          set_has_cgroup_mem_swap_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cgroup_mem_swap_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_tsc = 93 [default = false];
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 744 & 0xFF */)) {
          set_has_disable_tsc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_tsc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool forward_signals = 94 [default = false];
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 752 & 0xFF */)) {
          set_has_forward_signals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_signals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool detect_cgroupv2 = 95 [default = false];
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 760 & 0xFF */)) {
          set_has_detect_cgroupv2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &detect_cgroupv2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nsjail.NsJailConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nsjail.NsJailConfig)
  return false;
#undef DO_
}

void NsJailConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nsjail.NsJailConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string description = 2;
  for (int i = 0, n = this->description_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description(i).data(), static_cast<int>(this->description(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.description");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(i), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.Mode mode = 3 [default = ONCE];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string hostname = 4 [default = "NSJAIL"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostname(), output);
  }

  // optional string cwd = 5 [default = "/"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cwd().data(), static_cast<int>(this->cwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cwd(), output);
  }

  // optional bool no_pivotroot = 6 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->no_pivotroot(), output);
  }

  // optional uint32 port = 7 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->port(), output);
  }

  // optional string bindhost = 8 [default = "::"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindhost().data(), static_cast<int>(this->bindhost().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.bindhost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bindhost(), output);
  }

  // optional uint32 max_conns = 9 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_conns(), output);
  }

  // optional uint32 max_conns_per_ip = 10 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_conns_per_ip(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 time_limit = 11 [default = 600];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_limit(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool daemon = 12 [default = false];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->daemon(), output);
  }

  // optional uint32 max_cpus = 13 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_cpus(), output);
  }

  // optional int32 log_fd = 14;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->log_fd(), output);
  }

  // optional string log_file = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_file().data(), static_cast<int>(this->log_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.log_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->log_file(), output);
  }

  // optional .nsjail.LogLevel log_level = 16;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->log_level(), output);
  }

  // optional bool keep_env = 17 [default = false];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->keep_env(), output);
  }

  // repeated string envar = 18;
  for (int i = 0, n = this->envar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->envar(i).data(), static_cast<int>(this->envar(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.envar");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->envar(i), output);
  }

  // optional bool keep_caps = 19 [default = false];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->keep_caps(), output);
  }

  // repeated string cap = 20;
  for (int i = 0, n = this->cap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cap(i).data(), static_cast<int>(this->cap(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cap");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->cap(i), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool silent = 21 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->silent(), output);
  }

  // optional bool skip_setsid = 22 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->skip_setsid(), output);
  }

  // optional bool stderr_to_null = 23 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->stderr_to_null(), output);
  }

  // repeated int32 pass_fd = 24;
  for (int i = 0, n = this->pass_fd_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->pass_fd(i), output);
  }

  // optional bool disable_no_new_privs = 25 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->disable_no_new_privs(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_as = 26 [default = 4096];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->rlimit_as(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.RLimit rlimit_as_type = 27 [default = VALUE];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->rlimit_as_type(), output);
  }

  // optional uint64 rlimit_core = 28 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->rlimit_core(), output);
  }

  // optional .nsjail.RLimit rlimit_core_type = 29 [default = VALUE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->rlimit_core_type(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_cpu = 30 [default = 600];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->rlimit_cpu(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.RLimit rlimit_cpu_type = 31 [default = VALUE];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->rlimit_cpu_type(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_fsize = 32 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->rlimit_fsize(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.RLimit rlimit_fsize_type = 33 [default = VALUE];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->rlimit_fsize_type(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_nofile = 34 [default = 32];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->rlimit_nofile(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.RLimit rlimit_nofile_type = 35 [default = VALUE];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->rlimit_nofile_type(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_nproc = 36 [default = 1024];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->rlimit_nproc(), output);
  }

  // optional .nsjail.RLimit rlimit_nproc_type = 37 [default = SOFT];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->rlimit_nproc_type(), output);
  }

  // optional uint64 rlimit_stack = 38 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->rlimit_stack(), output);
  }

  // optional .nsjail.RLimit rlimit_stack_type = 39 [default = SOFT];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      39, this->rlimit_stack_type(), output);
  }

  // optional uint64 rlimit_memlock = 40 [default = 64];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->rlimit_memlock(), output);
  }

  // optional .nsjail.RLimit rlimit_memlock_type = 41 [default = SOFT];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      41, this->rlimit_memlock_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 rlimit_rtprio = 42 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(42, this->rlimit_rtprio(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .nsjail.RLimit rlimit_rtprio_type = 43 [default = SOFT];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      43, this->rlimit_rtprio_type(), output);
  }

  // optional uint64 rlimit_msgqueue = 44 [default = 1024];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->rlimit_msgqueue(), output);
  }

  // optional .nsjail.RLimit rlimit_msgqueue_type = 45 [default = SOFT];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      45, this->rlimit_msgqueue_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool disable_rl = 46 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->disable_rl(), output);
  }

  // optional bool persona_addr_compat_layout = 47 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->persona_addr_compat_layout(), output);
  }

  // optional bool persona_mmap_page_zero = 48 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->persona_mmap_page_zero(), output);
  }

  // optional bool persona_read_implies_exec = 49 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->persona_read_implies_exec(), output);
  }

  // optional bool persona_addr_limit_3gb = 50 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->persona_addr_limit_3gb(), output);
  }

  // optional bool persona_addr_no_randomize = 51 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->persona_addr_no_randomize(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool clone_newnet = 52 [default = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->clone_newnet(), output);
  }

  // optional bool clone_newuser = 53 [default = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->clone_newuser(), output);
  }

  // optional bool clone_newns = 54 [default = true];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->clone_newns(), output);
  }

  // optional bool clone_newpid = 55 [default = true];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->clone_newpid(), output);
  }

  // optional bool clone_newipc = 56 [default = true];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->clone_newipc(), output);
  }

  // optional bool clone_newuts = 57 [default = true];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->clone_newuts(), output);
  }

  // optional bool clone_newcgroup = 58 [default = true];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->clone_newcgroup(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool clone_newtime = 59 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->clone_newtime(), output);
  }

  // repeated .nsjail.IdMap uidmap = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uidmap_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60,
      this->uidmap(static_cast<int>(i)),
      output);
  }

  // repeated .nsjail.IdMap gidmap = 61;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gidmap_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61,
      this->gidmap(static_cast<int>(i)),
      output);
  }

  // optional bool mount_proc = 62 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->mount_proc(), output);
  }

  // repeated .nsjail.MountPt mount = 63;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mount_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63,
      this->mount(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string seccomp_policy_file = 64;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seccomp_policy_file().data(), static_cast<int>(this->seccomp_policy_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.seccomp_policy_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      64, this->seccomp_policy_file(), output);
  }

  // repeated string seccomp_string = 65;
  for (int i = 0, n = this->seccomp_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seccomp_string(i).data(), static_cast<int>(this->seccomp_string(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.seccomp_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      65, this->seccomp_string(i), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool seccomp_log = 66 [default = false];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->seccomp_log(), output);
  }

  // optional uint64 cgroup_mem_max = 67 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(67, this->cgroup_mem_max(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cgroup_mem_mount = 68 [default = "/sys/fs/cgroup/memory"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_mem_mount().data(), static_cast<int>(this->cgroup_mem_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_mem_mount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      68, this->cgroup_mem_mount(), output);
  }

  // optional string cgroup_mem_parent = 69 [default = "NSJAIL"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_mem_parent().data(), static_cast<int>(this->cgroup_mem_parent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_mem_parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      69, this->cgroup_mem_parent(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 cgroup_pids_max = 70 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(70, this->cgroup_pids_max(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cgroup_pids_mount = 71 [default = "/sys/fs/cgroup/pids"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_pids_mount().data(), static_cast<int>(this->cgroup_pids_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_pids_mount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      71, this->cgroup_pids_mount(), output);
  }

  // optional string cgroup_pids_parent = 72 [default = "NSJAIL"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_pids_parent().data(), static_cast<int>(this->cgroup_pids_parent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_pids_parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      72, this->cgroup_pids_parent(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 cgroup_net_cls_classid = 73 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->cgroup_net_cls_classid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cgroup_net_cls_mount = 74 [default = "/sys/fs/cgroup/net_cls"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_net_cls_mount().data(), static_cast<int>(this->cgroup_net_cls_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_net_cls_mount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      74, this->cgroup_net_cls_mount(), output);
  }

  // optional string cgroup_net_cls_parent = 75 [default = "NSJAIL"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_net_cls_parent().data(), static_cast<int>(this->cgroup_net_cls_parent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_net_cls_parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      75, this->cgroup_net_cls_parent(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 cgroup_cpu_ms_per_sec = 76 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->cgroup_cpu_ms_per_sec(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cgroup_cpu_mount = 77 [default = "/sys/fs/cgroup/cpu"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_cpu_mount().data(), static_cast<int>(this->cgroup_cpu_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_cpu_mount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      77, this->cgroup_cpu_mount(), output);
  }

  // optional string cgroup_cpu_parent = 78 [default = "NSJAIL"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_cpu_parent().data(), static_cast<int>(this->cgroup_cpu_parent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_cpu_parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      78, this->cgroup_cpu_parent(), output);
  }

  // optional string cgroupv2_mount = 79 [default = "/sys/fs/cgroup"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroupv2_mount().data(), static_cast<int>(this->cgroupv2_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroupv2_mount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      79, this->cgroupv2_mount(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_cgroupv2 = 80 [default = false];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->use_cgroupv2(), output);
  }

  // optional bool iface_no_lo = 81 [default = false];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->iface_no_lo(), output);
  }

  // repeated string iface_own = 82;
  for (int i = 0, n = this->iface_own_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iface_own(i).data(), static_cast<int>(this->iface_own(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.iface_own");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      82, this->iface_own(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string macvlan_iface = 83;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_iface().data(), static_cast<int>(this->macvlan_iface().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_iface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      83, this->macvlan_iface(), output);
  }

  // optional string macvlan_vs_ip = 84 [default = "192.168.0.2"];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_ip().data(), static_cast<int>(this->macvlan_vs_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      84, this->macvlan_vs_ip(), output);
  }

  // optional string macvlan_vs_nm = 85 [default = "255.255.255.0"];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_nm().data(), static_cast<int>(this->macvlan_vs_nm().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_nm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      85, this->macvlan_vs_nm(), output);
  }

  // optional string macvlan_vs_gw = 86 [default = "192.168.0.1"];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_gw().data(), static_cast<int>(this->macvlan_vs_gw().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_gw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      86, this->macvlan_vs_gw(), output);
  }

  // optional string macvlan_vs_ma = 87 [default = ""];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_ma().data(), static_cast<int>(this->macvlan_vs_ma().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_ma");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      87, this->macvlan_vs_ma(), output);
  }

  // optional string macvlan_vs_mo = 88 [default = "private"];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_mo().data(), static_cast<int>(this->macvlan_vs_mo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_mo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      88, this->macvlan_vs_mo(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 nice_level = 89 [default = 19];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(89, this->nice_level(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .nsjail.Exe exec_bin = 90;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->_internal_exec_bin(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 cgroup_mem_memsw_max = 91 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(91, this->cgroup_mem_memsw_max(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int64 cgroup_mem_swap_max = 92 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(92, this->cgroup_mem_swap_max(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool disable_tsc = 93 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(93, this->disable_tsc(), output);
  }

  // optional bool forward_signals = 94 [default = false];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(94, this->forward_signals(), output);
  }

  // optional bool detect_cgroupv2 = 95 [default = false];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(95, this->detect_cgroupv2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nsjail.NsJailConfig)
}

::google::protobuf::uint8* NsJailConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nsjail.NsJailConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string description = 2;
  for (int i = 0, n = this->description_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description(i).data(), static_cast<int>(this->description(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.description");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->description(i), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.Mode mode = 3 [default = ONCE];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string hostname = 4 [default = "NSJAIL"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // optional string cwd = 5 [default = "/"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cwd().data(), static_cast<int>(this->cwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cwd(), target);
  }

  // optional bool no_pivotroot = 6 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->no_pivotroot(), target);
  }

  // optional uint32 port = 7 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->port(), target);
  }

  // optional string bindhost = 8 [default = "::"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindhost().data(), static_cast<int>(this->bindhost().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.bindhost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bindhost(), target);
  }

  // optional uint32 max_conns = 9 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_conns(), target);
  }

  // optional uint32 max_conns_per_ip = 10 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_conns_per_ip(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 time_limit = 11 [default = 600];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_limit(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool daemon = 12 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->daemon(), target);
  }

  // optional uint32 max_cpus = 13 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_cpus(), target);
  }

  // optional int32 log_fd = 14;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->log_fd(), target);
  }

  // optional string log_file = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_file().data(), static_cast<int>(this->log_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.log_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->log_file(), target);
  }

  // optional .nsjail.LogLevel log_level = 16;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->log_level(), target);
  }

  // optional bool keep_env = 17 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->keep_env(), target);
  }

  // repeated string envar = 18;
  for (int i = 0, n = this->envar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->envar(i).data(), static_cast<int>(this->envar(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.envar");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->envar(i), target);
  }

  // optional bool keep_caps = 19 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->keep_caps(), target);
  }

  // repeated string cap = 20;
  for (int i = 0, n = this->cap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cap(i).data(), static_cast<int>(this->cap(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cap");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->cap(i), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool silent = 21 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->silent(), target);
  }

  // optional bool skip_setsid = 22 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->skip_setsid(), target);
  }

  // optional bool stderr_to_null = 23 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->stderr_to_null(), target);
  }

  // repeated int32 pass_fd = 24;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(24, this->pass_fd_, target);

  // optional bool disable_no_new_privs = 25 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->disable_no_new_privs(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_as = 26 [default = 4096];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->rlimit_as(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.RLimit rlimit_as_type = 27 [default = VALUE];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->rlimit_as_type(), target);
  }

  // optional uint64 rlimit_core = 28 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->rlimit_core(), target);
  }

  // optional .nsjail.RLimit rlimit_core_type = 29 [default = VALUE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->rlimit_core_type(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_cpu = 30 [default = 600];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->rlimit_cpu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.RLimit rlimit_cpu_type = 31 [default = VALUE];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->rlimit_cpu_type(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_fsize = 32 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->rlimit_fsize(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.RLimit rlimit_fsize_type = 33 [default = VALUE];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->rlimit_fsize_type(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_nofile = 34 [default = 32];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->rlimit_nofile(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .nsjail.RLimit rlimit_nofile_type = 35 [default = VALUE];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->rlimit_nofile_type(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 rlimit_nproc = 36 [default = 1024];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->rlimit_nproc(), target);
  }

  // optional .nsjail.RLimit rlimit_nproc_type = 37 [default = SOFT];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->rlimit_nproc_type(), target);
  }

  // optional uint64 rlimit_stack = 38 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->rlimit_stack(), target);
  }

  // optional .nsjail.RLimit rlimit_stack_type = 39 [default = SOFT];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      39, this->rlimit_stack_type(), target);
  }

  // optional uint64 rlimit_memlock = 40 [default = 64];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->rlimit_memlock(), target);
  }

  // optional .nsjail.RLimit rlimit_memlock_type = 41 [default = SOFT];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      41, this->rlimit_memlock_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 rlimit_rtprio = 42 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(42, this->rlimit_rtprio(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .nsjail.RLimit rlimit_rtprio_type = 43 [default = SOFT];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      43, this->rlimit_rtprio_type(), target);
  }

  // optional uint64 rlimit_msgqueue = 44 [default = 1024];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->rlimit_msgqueue(), target);
  }

  // optional .nsjail.RLimit rlimit_msgqueue_type = 45 [default = SOFT];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      45, this->rlimit_msgqueue_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool disable_rl = 46 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->disable_rl(), target);
  }

  // optional bool persona_addr_compat_layout = 47 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->persona_addr_compat_layout(), target);
  }

  // optional bool persona_mmap_page_zero = 48 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->persona_mmap_page_zero(), target);
  }

  // optional bool persona_read_implies_exec = 49 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->persona_read_implies_exec(), target);
  }

  // optional bool persona_addr_limit_3gb = 50 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->persona_addr_limit_3gb(), target);
  }

  // optional bool persona_addr_no_randomize = 51 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->persona_addr_no_randomize(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool clone_newnet = 52 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->clone_newnet(), target);
  }

  // optional bool clone_newuser = 53 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->clone_newuser(), target);
  }

  // optional bool clone_newns = 54 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->clone_newns(), target);
  }

  // optional bool clone_newpid = 55 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->clone_newpid(), target);
  }

  // optional bool clone_newipc = 56 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->clone_newipc(), target);
  }

  // optional bool clone_newuts = 57 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->clone_newuts(), target);
  }

  // optional bool clone_newcgroup = 58 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->clone_newcgroup(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool clone_newtime = 59 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->clone_newtime(), target);
  }

  // repeated .nsjail.IdMap uidmap = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uidmap_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60, this->uidmap(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nsjail.IdMap gidmap = 61;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gidmap_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        61, this->gidmap(static_cast<int>(i)), deterministic, target);
  }

  // optional bool mount_proc = 62 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->mount_proc(), target);
  }

  // repeated .nsjail.MountPt mount = 63;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mount_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        63, this->mount(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string seccomp_policy_file = 64;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seccomp_policy_file().data(), static_cast<int>(this->seccomp_policy_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.seccomp_policy_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        64, this->seccomp_policy_file(), target);
  }

  // repeated string seccomp_string = 65;
  for (int i = 0, n = this->seccomp_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seccomp_string(i).data(), static_cast<int>(this->seccomp_string(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.seccomp_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(65, this->seccomp_string(i), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool seccomp_log = 66 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->seccomp_log(), target);
  }

  // optional uint64 cgroup_mem_max = 67 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(67, this->cgroup_mem_max(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cgroup_mem_mount = 68 [default = "/sys/fs/cgroup/memory"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_mem_mount().data(), static_cast<int>(this->cgroup_mem_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_mem_mount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        68, this->cgroup_mem_mount(), target);
  }

  // optional string cgroup_mem_parent = 69 [default = "NSJAIL"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_mem_parent().data(), static_cast<int>(this->cgroup_mem_parent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_mem_parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        69, this->cgroup_mem_parent(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 cgroup_pids_max = 70 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(70, this->cgroup_pids_max(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cgroup_pids_mount = 71 [default = "/sys/fs/cgroup/pids"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_pids_mount().data(), static_cast<int>(this->cgroup_pids_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_pids_mount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        71, this->cgroup_pids_mount(), target);
  }

  // optional string cgroup_pids_parent = 72 [default = "NSJAIL"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_pids_parent().data(), static_cast<int>(this->cgroup_pids_parent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_pids_parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        72, this->cgroup_pids_parent(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 cgroup_net_cls_classid = 73 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->cgroup_net_cls_classid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cgroup_net_cls_mount = 74 [default = "/sys/fs/cgroup/net_cls"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_net_cls_mount().data(), static_cast<int>(this->cgroup_net_cls_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_net_cls_mount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        74, this->cgroup_net_cls_mount(), target);
  }

  // optional string cgroup_net_cls_parent = 75 [default = "NSJAIL"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_net_cls_parent().data(), static_cast<int>(this->cgroup_net_cls_parent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_net_cls_parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        75, this->cgroup_net_cls_parent(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 cgroup_cpu_ms_per_sec = 76 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->cgroup_cpu_ms_per_sec(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cgroup_cpu_mount = 77 [default = "/sys/fs/cgroup/cpu"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_cpu_mount().data(), static_cast<int>(this->cgroup_cpu_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_cpu_mount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        77, this->cgroup_cpu_mount(), target);
  }

  // optional string cgroup_cpu_parent = 78 [default = "NSJAIL"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroup_cpu_parent().data(), static_cast<int>(this->cgroup_cpu_parent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroup_cpu_parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        78, this->cgroup_cpu_parent(), target);
  }

  // optional string cgroupv2_mount = 79 [default = "/sys/fs/cgroup"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cgroupv2_mount().data(), static_cast<int>(this->cgroupv2_mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.cgroupv2_mount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        79, this->cgroupv2_mount(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_cgroupv2 = 80 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->use_cgroupv2(), target);
  }

  // optional bool iface_no_lo = 81 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->iface_no_lo(), target);
  }

  // repeated string iface_own = 82;
  for (int i = 0, n = this->iface_own_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iface_own(i).data(), static_cast<int>(this->iface_own(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.iface_own");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(82, this->iface_own(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string macvlan_iface = 83;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_iface().data(), static_cast<int>(this->macvlan_iface().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_iface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        83, this->macvlan_iface(), target);
  }

  // optional string macvlan_vs_ip = 84 [default = "192.168.0.2"];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_ip().data(), static_cast<int>(this->macvlan_vs_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        84, this->macvlan_vs_ip(), target);
  }

  // optional string macvlan_vs_nm = 85 [default = "255.255.255.0"];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_nm().data(), static_cast<int>(this->macvlan_vs_nm().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_nm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        85, this->macvlan_vs_nm(), target);
  }

  // optional string macvlan_vs_gw = 86 [default = "192.168.0.1"];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_gw().data(), static_cast<int>(this->macvlan_vs_gw().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_gw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        86, this->macvlan_vs_gw(), target);
  }

  // optional string macvlan_vs_ma = 87 [default = ""];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_ma().data(), static_cast<int>(this->macvlan_vs_ma().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_ma");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        87, this->macvlan_vs_ma(), target);
  }

  // optional string macvlan_vs_mo = 88 [default = "private"];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macvlan_vs_mo().data(), static_cast<int>(this->macvlan_vs_mo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nsjail.NsJailConfig.macvlan_vs_mo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        88, this->macvlan_vs_mo(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 nice_level = 89 [default = 19];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(89, this->nice_level(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .nsjail.Exe exec_bin = 90;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        90, this->_internal_exec_bin(), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 cgroup_mem_memsw_max = 91 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(91, this->cgroup_mem_memsw_max(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int64 cgroup_mem_swap_max = 92 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(92, this->cgroup_mem_swap_max(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool disable_tsc = 93 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(93, this->disable_tsc(), target);
  }

  // optional bool forward_signals = 94 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(94, this->forward_signals(), target);
  }

  // optional bool detect_cgroupv2 = 95 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(95, this->detect_cgroupv2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nsjail.NsJailConfig)
  return target;
}

size_t NsJailConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nsjail.NsJailConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string description = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->description_size());
  for (int i = 0, n = this->description_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->description(i));
  }

  // repeated string envar = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->envar_size());
  for (int i = 0, n = this->envar_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->envar(i));
  }

  // repeated string cap = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->cap_size());
  for (int i = 0, n = this->cap_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cap(i));
  }

  // repeated int32 pass_fd = 24;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->pass_fd_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->pass_fd_size());
    total_size += data_size;
  }

  // repeated .nsjail.IdMap uidmap = 60;
  {
    unsigned int count = static_cast<unsigned int>(this->uidmap_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->uidmap(static_cast<int>(i)));
    }
  }

  // repeated .nsjail.IdMap gidmap = 61;
  {
    unsigned int count = static_cast<unsigned int>(this->gidmap_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gidmap(static_cast<int>(i)));
    }
  }

  // repeated .nsjail.MountPt mount = 63;
  {
    unsigned int count = static_cast<unsigned int>(this->mount_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mount(static_cast<int>(i)));
    }
  }

  // repeated string seccomp_string = 65;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->seccomp_string_size());
  for (int i = 0, n = this->seccomp_string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->seccomp_string(i));
  }

  // repeated string iface_own = 82;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->iface_own_size());
  for (int i = 0, n = this->iface_own_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->iface_own(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hostname = 4 [default = "NSJAIL"];
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string cwd = 5 [default = "/"];
    if (has_cwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cwd());
    }

    // optional string bindhost = 8 [default = "::"];
    if (has_bindhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindhost());
    }

    // optional string log_file = 15;
    if (has_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_file());
    }

    // optional string seccomp_policy_file = 64;
    if (has_seccomp_policy_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seccomp_policy_file());
    }

    // optional string cgroup_mem_mount = 68 [default = "/sys/fs/cgroup/memory"];
    if (has_cgroup_mem_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroup_mem_mount());
    }

    // optional string cgroup_mem_parent = 69 [default = "NSJAIL"];
    if (has_cgroup_mem_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroup_mem_parent());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string cgroup_pids_mount = 71 [default = "/sys/fs/cgroup/pids"];
    if (has_cgroup_pids_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroup_pids_mount());
    }

    // optional string cgroup_pids_parent = 72 [default = "NSJAIL"];
    if (has_cgroup_pids_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroup_pids_parent());
    }

    // optional string cgroup_net_cls_mount = 74 [default = "/sys/fs/cgroup/net_cls"];
    if (has_cgroup_net_cls_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroup_net_cls_mount());
    }

    // optional string cgroup_net_cls_parent = 75 [default = "NSJAIL"];
    if (has_cgroup_net_cls_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroup_net_cls_parent());
    }

    // optional string cgroup_cpu_mount = 77 [default = "/sys/fs/cgroup/cpu"];
    if (has_cgroup_cpu_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroup_cpu_mount());
    }

    // optional string cgroup_cpu_parent = 78 [default = "NSJAIL"];
    if (has_cgroup_cpu_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroup_cpu_parent());
    }

    // optional string cgroupv2_mount = 79 [default = "/sys/fs/cgroup"];
    if (has_cgroupv2_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cgroupv2_mount());
    }

    // optional string macvlan_iface = 83;
    if (has_macvlan_iface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macvlan_iface());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string macvlan_vs_ip = 84 [default = "192.168.0.2"];
    if (has_macvlan_vs_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macvlan_vs_ip());
    }

    // optional string macvlan_vs_nm = 85 [default = "255.255.255.0"];
    if (has_macvlan_vs_nm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macvlan_vs_nm());
    }

    // optional string macvlan_vs_gw = 86 [default = "192.168.0.1"];
    if (has_macvlan_vs_gw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macvlan_vs_gw());
    }

    // optional string macvlan_vs_ma = 87 [default = ""];
    if (has_macvlan_vs_ma()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macvlan_vs_ma());
    }

    // optional string macvlan_vs_mo = 88 [default = "private"];
    if (has_macvlan_vs_mo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macvlan_vs_mo());
    }

    // optional .nsjail.Exe exec_bin = 90;
    if (has_exec_bin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *exec_bin_);
    }

    // optional uint32 port = 7 [default = 0];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 max_conns = 9 [default = 0];
    if (has_max_conns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_conns());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 max_conns_per_ip = 10 [default = 0];
    if (has_max_conns_per_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_conns_per_ip());
    }

    // optional uint32 max_cpus = 13 [default = 0];
    if (has_max_cpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_cpus());
    }

    // optional bool no_pivotroot = 6 [default = false];
    if (has_no_pivotroot()) {
      total_size += 1 + 1;
    }

    // optional bool daemon = 12 [default = false];
    if (has_daemon()) {
      total_size += 1 + 1;
    }

    // optional bool keep_env = 17 [default = false];
    if (has_keep_env()) {
      total_size += 2 + 1;
    }

    // optional bool keep_caps = 19 [default = false];
    if (has_keep_caps()) {
      total_size += 2 + 1;
    }

    // optional int32 log_fd = 14;
    if (has_log_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_fd());
    }

    // optional .nsjail.LogLevel log_level = 16;
    if (has_log_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->log_level());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool silent = 21 [default = false];
    if (has_silent()) {
      total_size += 2 + 1;
    }

    // optional bool skip_setsid = 22 [default = false];
    if (has_skip_setsid()) {
      total_size += 2 + 1;
    }

    // optional bool stderr_to_null = 23 [default = false];
    if (has_stderr_to_null()) {
      total_size += 2 + 1;
    }

    // optional bool disable_no_new_privs = 25 [default = false];
    if (has_disable_no_new_privs()) {
      total_size += 2 + 1;
    }

    // optional uint64 rlimit_core = 28 [default = 0];
    if (has_rlimit_core()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_core());
    }

    // optional .nsjail.RLimit rlimit_as_type = 27 [default = VALUE];
    if (has_rlimit_as_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_as_type());
    }

    // optional .nsjail.RLimit rlimit_core_type = 29 [default = VALUE];
    if (has_rlimit_core_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_core_type());
    }

    // optional .nsjail.RLimit rlimit_cpu_type = 31 [default = VALUE];
    if (has_rlimit_cpu_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_cpu_type());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .nsjail.RLimit rlimit_fsize_type = 33 [default = VALUE];
    if (has_rlimit_fsize_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_fsize_type());
    }

    // optional uint64 rlimit_rtprio = 42 [default = 0];
    if (has_rlimit_rtprio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_rtprio());
    }

    // optional .nsjail.RLimit rlimit_nofile_type = 35 [default = VALUE];
    if (has_rlimit_nofile_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_nofile_type());
    }

    // optional bool disable_rl = 46 [default = false];
    if (has_disable_rl()) {
      total_size += 2 + 1;
    }

    // optional bool persona_addr_compat_layout = 47 [default = false];
    if (has_persona_addr_compat_layout()) {
      total_size += 2 + 1;
    }

    // optional bool persona_mmap_page_zero = 48 [default = false];
    if (has_persona_mmap_page_zero()) {
      total_size += 2 + 1;
    }

    // optional bool persona_read_implies_exec = 49 [default = false];
    if (has_persona_read_implies_exec()) {
      total_size += 2 + 1;
    }

    // optional bool persona_addr_limit_3gb = 50 [default = false];
    if (has_persona_addr_limit_3gb()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional bool persona_addr_no_randomize = 51 [default = false];
    if (has_persona_addr_no_randomize()) {
      total_size += 2 + 1;
    }

    // optional bool clone_newtime = 59 [default = false];
    if (has_clone_newtime()) {
      total_size += 2 + 1;
    }

    // optional bool mount_proc = 62 [default = false];
    if (has_mount_proc()) {
      total_size += 2 + 1;
    }

    // optional uint32 cgroup_net_cls_classid = 73 [default = 0];
    if (has_cgroup_net_cls_classid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cgroup_net_cls_classid());
    }

    // optional uint64 cgroup_mem_max = 67 [default = 0];
    if (has_cgroup_mem_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cgroup_mem_max());
    }

    // optional uint64 cgroup_pids_max = 70 [default = 0];
    if (has_cgroup_pids_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cgroup_pids_max());
    }

    // optional uint32 cgroup_cpu_ms_per_sec = 76 [default = 0];
    if (has_cgroup_cpu_ms_per_sec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cgroup_cpu_ms_per_sec());
    }

    // optional bool seccomp_log = 66 [default = false];
    if (has_seccomp_log()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional bool use_cgroupv2 = 80 [default = false];
    if (has_use_cgroupv2()) {
      total_size += 2 + 1;
    }

    // optional bool iface_no_lo = 81 [default = false];
    if (has_iface_no_lo()) {
      total_size += 2 + 1;
    }

    // optional bool disable_tsc = 93 [default = false];
    if (has_disable_tsc()) {
      total_size += 2 + 1;
    }

    // optional uint64 cgroup_mem_memsw_max = 91 [default = 0];
    if (has_cgroup_mem_memsw_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cgroup_mem_memsw_max());
    }

    // optional bool forward_signals = 94 [default = false];
    if (has_forward_signals()) {
      total_size += 2 + 1;
    }

    // optional bool detect_cgroupv2 = 95 [default = false];
    if (has_detect_cgroupv2()) {
      total_size += 2 + 1;
    }

    // optional .nsjail.Mode mode = 3 [default = ONCE];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint32 time_limit = 11 [default = 600];
    if (has_time_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_limit());
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional uint64 rlimit_as = 26 [default = 4096];
    if (has_rlimit_as()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_as());
    }

    // optional uint64 rlimit_cpu = 30 [default = 600];
    if (has_rlimit_cpu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_cpu());
    }

    // optional uint64 rlimit_fsize = 32 [default = 1];
    if (has_rlimit_fsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_fsize());
    }

    // optional uint64 rlimit_nofile = 34 [default = 32];
    if (has_rlimit_nofile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_nofile());
    }

    // optional uint64 rlimit_nproc = 36 [default = 1024];
    if (has_rlimit_nproc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_nproc());
    }

    // optional uint64 rlimit_stack = 38 [default = 8];
    if (has_rlimit_stack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_stack());
    }

    // optional .nsjail.RLimit rlimit_nproc_type = 37 [default = SOFT];
    if (has_rlimit_nproc_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_nproc_type());
    }

    // optional .nsjail.RLimit rlimit_stack_type = 39 [default = SOFT];
    if (has_rlimit_stack_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_stack_type());
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional uint64 rlimit_memlock = 40 [default = 64];
    if (has_rlimit_memlock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_memlock());
    }

    // optional .nsjail.RLimit rlimit_memlock_type = 41 [default = SOFT];
    if (has_rlimit_memlock_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_memlock_type());
    }

    // optional .nsjail.RLimit rlimit_rtprio_type = 43 [default = SOFT];
    if (has_rlimit_rtprio_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_rtprio_type());
    }

    // optional uint64 rlimit_msgqueue = 44 [default = 1024];
    if (has_rlimit_msgqueue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rlimit_msgqueue());
    }

    // optional .nsjail.RLimit rlimit_msgqueue_type = 45 [default = SOFT];
    if (has_rlimit_msgqueue_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlimit_msgqueue_type());
    }

    // optional bool clone_newnet = 52 [default = true];
    if (has_clone_newnet()) {
      total_size += 2 + 1;
    }

    // optional bool clone_newuser = 53 [default = true];
    if (has_clone_newuser()) {
      total_size += 2 + 1;
    }

    // optional bool clone_newns = 54 [default = true];
    if (has_clone_newns()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[80 / 32] & 4128768u) {
    // optional bool clone_newpid = 55 [default = true];
    if (has_clone_newpid()) {
      total_size += 2 + 1;
    }

    // optional bool clone_newipc = 56 [default = true];
    if (has_clone_newipc()) {
      total_size += 2 + 1;
    }

    // optional bool clone_newuts = 57 [default = true];
    if (has_clone_newuts()) {
      total_size += 2 + 1;
    }

    // optional bool clone_newcgroup = 58 [default = true];
    if (has_clone_newcgroup()) {
      total_size += 2 + 1;
    }

    // optional int32 nice_level = 89 [default = 19];
    if (has_nice_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nice_level());
    }

    // optional int64 cgroup_mem_swap_max = 92 [default = -1];
    if (has_cgroup_mem_swap_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cgroup_mem_swap_max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NsJailConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nsjail.NsJailConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NsJailConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NsJailConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nsjail.NsJailConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nsjail.NsJailConfig)
    MergeFrom(*source);
  }
}

void NsJailConfig::MergeFrom(const NsJailConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nsjail.NsJailConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  envar_.MergeFrom(from.envar_);
  cap_.MergeFrom(from.cap_);
  pass_fd_.MergeFrom(from.pass_fd_);
  uidmap_.MergeFrom(from.uidmap_);
  gidmap_.MergeFrom(from.gidmap_);
  mount_.MergeFrom(from.mount_);
  seccomp_string_.MergeFrom(from.seccomp_string_);
  iface_own_.MergeFrom(from.iface_own_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get(), from.hostname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_cwd();
      cwd_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get(), from.cwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bindhost();
      bindhost_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get(), from.bindhost_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_log_file();
      log_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_file_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_seccomp_policy_file();
      seccomp_policy_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seccomp_policy_file_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_cgroup_mem_mount();
      cgroup_mem_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get(), from.cgroup_mem_mount_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_cgroup_mem_parent();
      cgroup_mem_parent_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get(), from.cgroup_mem_parent_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_cgroup_pids_mount();
      cgroup_pids_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get(), from.cgroup_pids_mount_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_cgroup_pids_parent();
      cgroup_pids_parent_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get(), from.cgroup_pids_parent_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_cgroup_net_cls_mount();
      cgroup_net_cls_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get(), from.cgroup_net_cls_mount_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_cgroup_net_cls_parent();
      cgroup_net_cls_parent_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get(), from.cgroup_net_cls_parent_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_cgroup_cpu_mount();
      cgroup_cpu_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get(), from.cgroup_cpu_mount_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_cgroup_cpu_parent();
      cgroup_cpu_parent_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get(), from.cgroup_cpu_parent_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_cgroupv2_mount();
      cgroupv2_mount_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get(), from.cgroupv2_mount_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_macvlan_iface();
      macvlan_iface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macvlan_iface_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_macvlan_vs_ip();
      macvlan_vs_ip_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get(), from.macvlan_vs_ip_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_macvlan_vs_nm();
      macvlan_vs_nm_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get(), from.macvlan_vs_nm_);
    }
    if (cached_has_bits & 0x00040000u) {
      set_has_macvlan_vs_gw();
      macvlan_vs_gw_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get(), from.macvlan_vs_gw_);
    }
    if (cached_has_bits & 0x00080000u) {
      set_has_macvlan_vs_ma();
      macvlan_vs_ma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macvlan_vs_ma_);
    }
    if (cached_has_bits & 0x00100000u) {
      set_has_macvlan_vs_mo();
      macvlan_vs_mo_.AssignWithDefault(&::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get(), from.macvlan_vs_mo_);
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_exec_bin()->::nsjail::Exe::MergeFrom(from.exec_bin());
    }
    if (cached_has_bits & 0x00400000u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_conns_ = from.max_conns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      max_conns_per_ip_ = from.max_conns_per_ip_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_cpus_ = from.max_cpus_;
    }
    if (cached_has_bits & 0x04000000u) {
      no_pivotroot_ = from.no_pivotroot_;
    }
    if (cached_has_bits & 0x08000000u) {
      daemon_ = from.daemon_;
    }
    if (cached_has_bits & 0x10000000u) {
      keep_env_ = from.keep_env_;
    }
    if (cached_has_bits & 0x20000000u) {
      keep_caps_ = from.keep_caps_;
    }
    if (cached_has_bits & 0x40000000u) {
      log_fd_ = from.log_fd_;
    }
    if (cached_has_bits & 0x80000000u) {
      log_level_ = from.log_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      silent_ = from.silent_;
    }
    if (cached_has_bits & 0x00000002u) {
      skip_setsid_ = from.skip_setsid_;
    }
    if (cached_has_bits & 0x00000004u) {
      stderr_to_null_ = from.stderr_to_null_;
    }
    if (cached_has_bits & 0x00000008u) {
      disable_no_new_privs_ = from.disable_no_new_privs_;
    }
    if (cached_has_bits & 0x00000010u) {
      rlimit_core_ = from.rlimit_core_;
    }
    if (cached_has_bits & 0x00000020u) {
      rlimit_as_type_ = from.rlimit_as_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      rlimit_core_type_ = from.rlimit_core_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      rlimit_cpu_type_ = from.rlimit_cpu_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      rlimit_fsize_type_ = from.rlimit_fsize_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      rlimit_rtprio_ = from.rlimit_rtprio_;
    }
    if (cached_has_bits & 0x00000400u) {
      rlimit_nofile_type_ = from.rlimit_nofile_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      disable_rl_ = from.disable_rl_;
    }
    if (cached_has_bits & 0x00001000u) {
      persona_addr_compat_layout_ = from.persona_addr_compat_layout_;
    }
    if (cached_has_bits & 0x00002000u) {
      persona_mmap_page_zero_ = from.persona_mmap_page_zero_;
    }
    if (cached_has_bits & 0x00004000u) {
      persona_read_implies_exec_ = from.persona_read_implies_exec_;
    }
    if (cached_has_bits & 0x00008000u) {
      persona_addr_limit_3gb_ = from.persona_addr_limit_3gb_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      persona_addr_no_randomize_ = from.persona_addr_no_randomize_;
    }
    if (cached_has_bits & 0x00020000u) {
      clone_newtime_ = from.clone_newtime_;
    }
    if (cached_has_bits & 0x00040000u) {
      mount_proc_ = from.mount_proc_;
    }
    if (cached_has_bits & 0x00080000u) {
      cgroup_net_cls_classid_ = from.cgroup_net_cls_classid_;
    }
    if (cached_has_bits & 0x00100000u) {
      cgroup_mem_max_ = from.cgroup_mem_max_;
    }
    if (cached_has_bits & 0x00200000u) {
      cgroup_pids_max_ = from.cgroup_pids_max_;
    }
    if (cached_has_bits & 0x00400000u) {
      cgroup_cpu_ms_per_sec_ = from.cgroup_cpu_ms_per_sec_;
    }
    if (cached_has_bits & 0x00800000u) {
      seccomp_log_ = from.seccomp_log_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      use_cgroupv2_ = from.use_cgroupv2_;
    }
    if (cached_has_bits & 0x02000000u) {
      iface_no_lo_ = from.iface_no_lo_;
    }
    if (cached_has_bits & 0x04000000u) {
      disable_tsc_ = from.disable_tsc_;
    }
    if (cached_has_bits & 0x08000000u) {
      cgroup_mem_memsw_max_ = from.cgroup_mem_memsw_max_;
    }
    if (cached_has_bits & 0x10000000u) {
      forward_signals_ = from.forward_signals_;
    }
    if (cached_has_bits & 0x20000000u) {
      detect_cgroupv2_ = from.detect_cgroupv2_;
    }
    if (cached_has_bits & 0x40000000u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x80000000u) {
      time_limit_ = from.time_limit_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      rlimit_as_ = from.rlimit_as_;
    }
    if (cached_has_bits & 0x00000002u) {
      rlimit_cpu_ = from.rlimit_cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      rlimit_fsize_ = from.rlimit_fsize_;
    }
    if (cached_has_bits & 0x00000008u) {
      rlimit_nofile_ = from.rlimit_nofile_;
    }
    if (cached_has_bits & 0x00000010u) {
      rlimit_nproc_ = from.rlimit_nproc_;
    }
    if (cached_has_bits & 0x00000020u) {
      rlimit_stack_ = from.rlimit_stack_;
    }
    if (cached_has_bits & 0x00000040u) {
      rlimit_nproc_type_ = from.rlimit_nproc_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      rlimit_stack_type_ = from.rlimit_stack_type_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      rlimit_memlock_ = from.rlimit_memlock_;
    }
    if (cached_has_bits & 0x00000200u) {
      rlimit_memlock_type_ = from.rlimit_memlock_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      rlimit_rtprio_type_ = from.rlimit_rtprio_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      rlimit_msgqueue_ = from.rlimit_msgqueue_;
    }
    if (cached_has_bits & 0x00001000u) {
      rlimit_msgqueue_type_ = from.rlimit_msgqueue_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      clone_newnet_ = from.clone_newnet_;
    }
    if (cached_has_bits & 0x00004000u) {
      clone_newuser_ = from.clone_newuser_;
    }
    if (cached_has_bits & 0x00008000u) {
      clone_newns_ = from.clone_newns_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      clone_newpid_ = from.clone_newpid_;
    }
    if (cached_has_bits & 0x00020000u) {
      clone_newipc_ = from.clone_newipc_;
    }
    if (cached_has_bits & 0x00040000u) {
      clone_newuts_ = from.clone_newuts_;
    }
    if (cached_has_bits & 0x00080000u) {
      clone_newcgroup_ = from.clone_newcgroup_;
    }
    if (cached_has_bits & 0x00100000u) {
      nice_level_ = from.nice_level_;
    }
    if (cached_has_bits & 0x00200000u) {
      cgroup_mem_swap_max_ = from.cgroup_mem_swap_max_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void NsJailConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nsjail.NsJailConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NsJailConfig::CopyFrom(const NsJailConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nsjail.NsJailConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NsJailConfig::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->mount())) return false;
  if (has_exec_bin()) {
    if (!this->exec_bin_->IsInitialized()) return false;
  }
  return true;
}

void NsJailConfig::Swap(NsJailConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NsJailConfig::InternalSwap(NsJailConfig* other) {
  using std::swap;
  description_.InternalSwap(CastToBase(&other->description_));
  envar_.InternalSwap(CastToBase(&other->envar_));
  cap_.InternalSwap(CastToBase(&other->cap_));
  pass_fd_.InternalSwap(&other->pass_fd_);
  CastToBase(&uidmap_)->InternalSwap(CastToBase(&other->uidmap_));
  CastToBase(&gidmap_)->InternalSwap(CastToBase(&other->gidmap_));
  CastToBase(&mount_)->InternalSwap(CastToBase(&other->mount_));
  seccomp_string_.InternalSwap(CastToBase(&other->seccomp_string_));
  iface_own_.InternalSwap(CastToBase(&other->iface_own_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_hostname_.get(),
    GetArenaNoVirtual());
  cwd_.Swap(&other->cwd_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cwd_.get(),
    GetArenaNoVirtual());
  bindhost_.Swap(&other->bindhost_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_bindhost_.get(),
    GetArenaNoVirtual());
  log_file_.Swap(&other->log_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  seccomp_policy_file_.Swap(&other->seccomp_policy_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cgroup_mem_mount_.Swap(&other->cgroup_mem_mount_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_mount_.get(),
    GetArenaNoVirtual());
  cgroup_mem_parent_.Swap(&other->cgroup_mem_parent_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_mem_parent_.get(),
    GetArenaNoVirtual());
  cgroup_pids_mount_.Swap(&other->cgroup_pids_mount_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_mount_.get(),
    GetArenaNoVirtual());
  cgroup_pids_parent_.Swap(&other->cgroup_pids_parent_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_pids_parent_.get(),
    GetArenaNoVirtual());
  cgroup_net_cls_mount_.Swap(&other->cgroup_net_cls_mount_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_mount_.get(),
    GetArenaNoVirtual());
  cgroup_net_cls_parent_.Swap(&other->cgroup_net_cls_parent_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_net_cls_parent_.get(),
    GetArenaNoVirtual());
  cgroup_cpu_mount_.Swap(&other->cgroup_cpu_mount_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_mount_.get(),
    GetArenaNoVirtual());
  cgroup_cpu_parent_.Swap(&other->cgroup_cpu_parent_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroup_cpu_parent_.get(),
    GetArenaNoVirtual());
  cgroupv2_mount_.Swap(&other->cgroupv2_mount_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_cgroupv2_mount_.get(),
    GetArenaNoVirtual());
  macvlan_iface_.Swap(&other->macvlan_iface_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  macvlan_vs_ip_.Swap(&other->macvlan_vs_ip_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_ip_.get(),
    GetArenaNoVirtual());
  macvlan_vs_nm_.Swap(&other->macvlan_vs_nm_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_nm_.get(),
    GetArenaNoVirtual());
  macvlan_vs_gw_.Swap(&other->macvlan_vs_gw_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_gw_.get(),
    GetArenaNoVirtual());
  macvlan_vs_ma_.Swap(&other->macvlan_vs_ma_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  macvlan_vs_mo_.Swap(&other->macvlan_vs_mo_, &::nsjail::NsJailConfig::_i_give_permission_to_break_this_code_default_macvlan_vs_mo_.get(),
    GetArenaNoVirtual());
  swap(exec_bin_, other->exec_bin_);
  swap(port_, other->port_);
  swap(max_conns_, other->max_conns_);
  swap(max_conns_per_ip_, other->max_conns_per_ip_);
  swap(max_cpus_, other->max_cpus_);
  swap(no_pivotroot_, other->no_pivotroot_);
  swap(daemon_, other->daemon_);
  swap(keep_env_, other->keep_env_);
  swap(keep_caps_, other->keep_caps_);
  swap(log_fd_, other->log_fd_);
  swap(log_level_, other->log_level_);
  swap(silent_, other->silent_);
  swap(skip_setsid_, other->skip_setsid_);
  swap(stderr_to_null_, other->stderr_to_null_);
  swap(disable_no_new_privs_, other->disable_no_new_privs_);
  swap(rlimit_core_, other->rlimit_core_);
  swap(rlimit_as_type_, other->rlimit_as_type_);
  swap(rlimit_core_type_, other->rlimit_core_type_);
  swap(rlimit_cpu_type_, other->rlimit_cpu_type_);
  swap(rlimit_fsize_type_, other->rlimit_fsize_type_);
  swap(rlimit_rtprio_, other->rlimit_rtprio_);
  swap(rlimit_nofile_type_, other->rlimit_nofile_type_);
  swap(disable_rl_, other->disable_rl_);
  swap(persona_addr_compat_layout_, other->persona_addr_compat_layout_);
  swap(persona_mmap_page_zero_, other->persona_mmap_page_zero_);
  swap(persona_read_implies_exec_, other->persona_read_implies_exec_);
  swap(persona_addr_limit_3gb_, other->persona_addr_limit_3gb_);
  swap(persona_addr_no_randomize_, other->persona_addr_no_randomize_);
  swap(clone_newtime_, other->clone_newtime_);
  swap(mount_proc_, other->mount_proc_);
  swap(cgroup_net_cls_classid_, other->cgroup_net_cls_classid_);
  swap(cgroup_mem_max_, other->cgroup_mem_max_);
  swap(cgroup_pids_max_, other->cgroup_pids_max_);
  swap(cgroup_cpu_ms_per_sec_, other->cgroup_cpu_ms_per_sec_);
  swap(seccomp_log_, other->seccomp_log_);
  swap(use_cgroupv2_, other->use_cgroupv2_);
  swap(iface_no_lo_, other->iface_no_lo_);
  swap(disable_tsc_, other->disable_tsc_);
  swap(cgroup_mem_memsw_max_, other->cgroup_mem_memsw_max_);
  swap(forward_signals_, other->forward_signals_);
  swap(detect_cgroupv2_, other->detect_cgroupv2_);
  swap(mode_, other->mode_);
  swap(time_limit_, other->time_limit_);
  swap(rlimit_as_, other->rlimit_as_);
  swap(rlimit_cpu_, other->rlimit_cpu_);
  swap(rlimit_fsize_, other->rlimit_fsize_);
  swap(rlimit_nofile_, other->rlimit_nofile_);
  swap(rlimit_nproc_, other->rlimit_nproc_);
  swap(rlimit_stack_, other->rlimit_stack_);
  swap(rlimit_nproc_type_, other->rlimit_nproc_type_);
  swap(rlimit_stack_type_, other->rlimit_stack_type_);
  swap(rlimit_memlock_, other->rlimit_memlock_);
  swap(rlimit_memlock_type_, other->rlimit_memlock_type_);
  swap(rlimit_rtprio_type_, other->rlimit_rtprio_type_);
  swap(rlimit_msgqueue_, other->rlimit_msgqueue_);
  swap(rlimit_msgqueue_type_, other->rlimit_msgqueue_type_);
  swap(clone_newnet_, other->clone_newnet_);
  swap(clone_newuser_, other->clone_newuser_);
  swap(clone_newns_, other->clone_newns_);
  swap(clone_newpid_, other->clone_newpid_);
  swap(clone_newipc_, other->clone_newipc_);
  swap(clone_newuts_, other->clone_newuts_);
  swap(clone_newcgroup_, other->clone_newcgroup_);
  swap(nice_level_, other->nice_level_);
  swap(cgroup_mem_swap_max_, other->cgroup_mem_swap_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NsJailConfig::GetMetadata() const {
  protobuf_config_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nsjail
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nsjail::IdMap* Arena::CreateMaybeMessage< ::nsjail::IdMap >(Arena* arena) {
  return Arena::CreateInternal< ::nsjail::IdMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nsjail::MountPt* Arena::CreateMaybeMessage< ::nsjail::MountPt >(Arena* arena) {
  return Arena::CreateInternal< ::nsjail::MountPt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nsjail::Exe* Arena::CreateMaybeMessage< ::nsjail::Exe >(Arena* arena) {
  return Arena::CreateInternal< ::nsjail::Exe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nsjail::NsJailConfig* Arena::CreateMaybeMessage< ::nsjail::NsJailConfig >(Arena* arena) {
  return Arena::CreateInternal< ::nsjail::NsJailConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
